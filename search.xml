<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>基于node.js开发的项目开发历程</title>
      <link href="/post/20241029163650.html"/>
      <url>/post/20241029163650.html</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这是一个练练手的项目，开发起始时间为2024.10.29<br>尽量赶在一周内完成该项目的开发。<br>项目——<strong>连锁餐厅管理系统</strong><br>采用前后端分离的方式创建系统，首先前端打算采用Vue 2 + Vuex + Vue Router。</p><p>计划临时有变，新的更改为全栈采用node.js</p><h1 id="实践-前端"><a href="#实践-前端" class="headerlink" title="实践-前端"></a>实践-前端</h1><h2 id="1-基础配置"><a href="#1-基础配置" class="headerlink" title="1.基础配置"></a>1.基础配置</h2><h3 id="1-首先安装Node-js和npm。此处略过…"><a href="#1-首先安装Node-js和npm。此处略过…" class="headerlink" title="1.首先安装Node.js和npm。此处略过…."></a>1.首先安装Node.js和npm。此处略过….</h3><p>使用 Vue CLI创建Vue项目。</p><h3 id="2-安装-Vue-CL："><a href="#2-安装-Vue-CL：" class="headerlink" title="2.安装 Vue CL："></a>2.安装 Vue CL：</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g @vue/cli</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">yarn global add @vue/cli</span><br></pre></td></tr></table></figure><p>在webstrome里创建一个新的项目。此处要设置为</p><p><img src="https://raw.githubusercontent.com/Peter-JiY/pictures/main//image-20241029165150661.png" alt="image-20241029165150661"></p><p>vue&#x2F;cli vue。一定要是这个，不然后面会有冲突版本的。</p><h3 id="3-安装-Element-UI："><a href="#3-安装-Element-UI：" class="headerlink" title="3.安装 Element UI："></a>3.安装 Element UI：</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install element-ui</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">yarn add element-ui</span><br></pre></td></tr></table></figure><p>项目引入</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ElementUI</span> <span class="keyword">from</span> <span class="string">&#x27;element-ui&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;element-ui/lib/theme-chalk/index.css&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">ElementUI</span>);</span><br></pre></td></tr></table></figure><h3 id="4-配置Vue-Router和Vuex"><a href="#4-配置Vue-Router和Vuex" class="headerlink" title="4.配置Vue Router和Vuex"></a>4.配置Vue Router和Vuex</h3><p>安装</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install vue-router vuex</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">yarn add vue-router vuex</span><br></pre></td></tr></table></figure><p>修正一下：</p><p>上述命令与Vue2不兼容调整为：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install vuex@3</span><br></pre></td></tr></table></figure><p>配置Vue Router：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// src/router/index.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueRouter</span> <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;../views/Home.vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">VueRouter</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Home&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">Home</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 更多路由</span></span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&#x27;history&#x27;</span>,</span><br><span class="line">  <span class="attr">base</span>: process.<span class="property">env</span>.<span class="property">BASE_URL</span>,</span><br><span class="line">  routes</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>配置Vuex：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// src/store/index.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vuex</span> <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Vuex</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">  <span class="attr">state</span>: &#123;&#125;,</span><br><span class="line">  <span class="attr">mutations</span>: &#123;&#125;,</span><br><span class="line">  <span class="attr">actions</span>: &#123;&#125;,</span><br><span class="line">  <span class="attr">modules</span>: &#123;&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="5-关于对Vuex的一些理解："><a href="#5-关于对Vuex的一些理解：" class="headerlink" title="5.关于对Vuex的一些理解："></a>5.关于对Vuex的一些理解：</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">比喻：餐厅服务</span><br><span class="line"></span><br><span class="line">想象一下你在一家大型连锁餐厅吃饭，这家餐厅有许多桌子，每桌都有顾客。这些顾客是你的 Vue 组件。他们可能需要点餐（获取数据）、改变订单（更新数据）或者要求结账（删除数据）。</span><br><span class="line"></span><br><span class="line">没有 Vuex 的情况：</span><br><span class="line">每个服务员（组件）需要记住每个顾客的所有请求和特殊需求，并且每次服务都需要单独处理，包括去厨房传达信息。如果一桌顾客要改变他们的订单，服务员需要再次跑到厨房去更新信息。这在几桌顾客的情况下可能可行，但想象一下如果有上百桌顾客，这将是多么混乱和容易出错！</span><br><span class="line"></span><br><span class="line">有了 Vuex 的情况：</span><br><span class="line">现在，餐厅引入了一个中央订单系统（Vuex）。所有的服务员（组件）通过这个系统来处理订单。当一个顾客要点餐时，服务员只需将请求输入到这个中央系统。如果顾客想要修改订单，服务员只需在系统中更新即可，而不需要记住每一个细节或亲自去厨房。</span><br><span class="line"></span><br><span class="line">这个系统确保了所有的信息都在一个地方集中管理，所有的服务员都可以实时看到最新的订单状态，整个过程变得更高效和有序。此外，如果需要对订单进行任何统计或报告，系统可以轻松提供这些信息。</span><br><span class="line"></span><br><span class="line">Vuex 在 Vue 应用中的具体作用：</span><br><span class="line">1. 集中管理状态：Vuex 为所有组件提供一个集中的状态存储，所有状态的变更都是可预测和可追踪的。</span><br><span class="line">2. 维护状态的一致性：在多个组件和页面之间共享数据时，Vuex 确保数据状态的一致性，无需手动同步各个组件之间的数据。</span><br><span class="line">3. 调试工具：Vuex 支持时光旅行调试，可以帮助你在开发过程中轻松追踪数据的变化和状态的变更。</span><br><span class="line"></span><br><span class="line">通过上述比喻和解释，希望你能更清楚地理解 Vuex 在管理和维护大型 Vue 应用中的重要性和便利性。简而言之，Vuex 就像一个使所有部分都有序运作的中央大脑，使得数据管理变得清晰和高效。</span><br></pre></td></tr></table></figure><h2 id="2-编写组件"><a href="#2-编写组件" class="headerlink" title="2.编写组件"></a>2.编写组件</h2><h2 id="3-路由管理"><a href="#3-路由管理" class="headerlink" title="3.路由管理"></a>3.路由管理</h2><h1 id="实践-后端"><a href="#实践-后端" class="headerlink" title="实践-后端"></a>实践-后端</h1><h2 id="1-express"><a href="#1-express" class="headerlink" title="1.express"></a>1.express</h2><p>安装express</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i express</span><br></pre></td></tr></table></figure><p>安装nodemon</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i nodemon</span><br></pre></td></tr></table></figure><p>编写server.js</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">PORT</span> = process.<span class="property">env</span>.<span class="property">PORT</span> || <span class="number">3000</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 中间件：解析 JSON 请求体</span></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">json</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试路由</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;欢迎来到我的后端服务器！&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 启动服务器</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="variable constant_">PORT</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`服务器正在运行，监听端口&#x27;Server is running on http://localhost:3000&#x27; <span class="subst">$&#123;PORT&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>搭建web服务框架及相关端口</p><h2 id="2-数据库mysql"><a href="#2-数据库mysql" class="headerlink" title="2.数据库mysql"></a>2.数据库mysql</h2><p>采用mysql2模块。mysql出现错误</p><p><img src="https://raw.githubusercontent.com/Peter-JiY/pictures/main//image-20241029220858920.png" alt="image-20241029220858920"></p><p>经查阅是npm包mysql的问题</p><p>MySQL 8 支持可插拔身份验证方法。默认情况下，使用名为 <code>caching_sha2_password</code> 的其中一个，而不是我们良好的旧<code>mysql_native_password</code> （<a href="https://dev.mysql.com/doc/refman/8.0/en/caching-sha2-pluggable-authentication.html">source</a>）。很明显，使用带有多次握手的加密算法比已经存在了 <a href="https://en.wikipedia.org/wiki/MySQL">24 年的</a>普通密码传递更安全！</p><p>现在，问题是 Node 中的 <code>mysqljs</code>（您使用 <code>npm i mysql</code> 安装并在 Node 代码中使用它的包）尚不支持 MySQL 8 的这种新的默认身份验证方法。问题就在这里。</p><p>具体可以参考大佬的总结：<a href="https://stackoverflow.com/questions/50093144/mysql-8-0-client-does-not-support-authentication-protocol-requested-by-server">https://stackoverflow.com/questions/50093144/mysql-8-0-client-does-not-support-authentication-protocol-requested-by-server</a></p><h1 id="实践-数据库表"><a href="#实践-数据库表" class="headerlink" title="实践-数据库表"></a>实践-数据库表</h1><h2 id="1-创建数据库名及表名称"><a href="#1-创建数据库名及表名称" class="headerlink" title="1.创建数据库名及表名称"></a>1.创建数据库名及表名称</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create database &#x27;resturantsystem&#x27;</span><br></pre></td></tr></table></figure><p>根据要完成的内容构建数据库表</p><ul><li><p>人员信息表</p></li><li><p>公告表</p></li><li><p>菜品表</p></li><li><p>订单表</p></li><li><p>餐厅表</p></li><li><p>···</p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Vue | Springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo主题添加Giscus评论系统（Butterfly主题）</title>
      <link href="/post/20240912102551.html"/>
      <url>/post/20240912102551.html</url>
      
        <content type="html"><![CDATA[<hr><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>当前使用的hexo生成的静态博客，主题是butterfly。当前主题支持很多的的评论系统：</p><p><img src="https://raw.githubusercontent.com/Peter-JiY/pictures/main//image-20240912111244972.png" alt="image-20240912111244972"></p><p>图中标出来的就是butterfly现在支持的评论系统。</p><p>Giscus是基于GitHub discussions的，再加上我们的博客也在GitHub搭建的，放在一起算了，省心不用管理。反正GitHub的仓库有1G的可存储空间。甚至可以在另外建一个仓库专门做图床使用。</p><p>Giscus主要基于在GitHub Discussion驱动的，全部数据都存储在GitHub Discussion之中，作者可以在GitHub上管理评论，相对于gitalk的授权较少。</p><h2 id="操作流程"><a href="#操作流程" class="headerlink" title="操作流程"></a>操作流程</h2><ol><li>选择一个仓库存储Discussions，开启GitHub Discussions</li><li>安装giscus</li><li>获取配置添加到博客</li></ol><h3 id="1-选择一个仓库"><a href="#1-选择一个仓库" class="headerlink" title="1.选择一个仓库"></a>1.选择一个仓库</h3><p>首先需要生一个仓库我这里采用的是我搭建博客的仓库<u>xxx&#x2F;xxx.github.io</u>。然后我们打开仓库的设置，把discussion打上√</p><p><img src="https://raw.githubusercontent.com/Peter-JiY/pictures/main//image-20240912121253920.png" alt="image-20240912121253920"></p><h3 id="2-着手安装giscus"><a href="#2-着手安装giscus" class="headerlink" title="2.着手安装giscus"></a>2.着手安装giscus</h3><p>点击进入<a href="https://github.com/apps/giscus">这里</a>进入安装界面，这里我我已经install过了所以显示为configure。如果是第一次进入页面应该是绿色的<strong>install</strong>按钮。</p><p><img src="https://raw.githubusercontent.com/Peter-JiY/pictures/main//image-20240912122042556.png" alt="image-20240912122042556"><br>点击<strong>install</strong>后进入新的页面进行设置</p><p><img src="https://raw.githubusercontent.com/Peter-JiY/pictures/main//image-20240912122455370.png" alt="image-20240912122455370"></p><h3 id="3-进入官方获取配置信息"><a href="#3-进入官方获取配置信息" class="headerlink" title="3.进入官方获取配置信息"></a>3.进入官方获取配置信息</h3><p>仓库名填写之前做<strong>discussion</strong>的仓库名。形如  <u>xxx&#x2F;xxx.github.io</u></p><p><img src="https://raw.githubusercontent.com/Peter-JiY/pictures/main//image-20240912123120097.png" alt="image-20240912123120097"></p><p><strong>继续勾选</strong></p><p><img src="https://raw.githubusercontent.com/Peter-JiY/pictures/main//image-20240912123641865.png" alt="image-20240912123641865"></p><p>按照图中勾选</p><p><img src="https://raw.githubusercontent.com/Peter-JiY/pictures/main//image-20240912123745828.png" alt="image-20240912123745828"></p><p>出现形如此类的东西<strong>复制</strong>一份等会需要用到</p><p><img src="https://raw.githubusercontent.com/Peter-JiY/pictures/main//image-20240912123939921.png" alt="image-20240912123939921"></p><p>因为我没填写所以是为空的，你填写就会有东西。</p><h3 id="4-将配置文件写入config"><a href="#4-将配置文件写入config" class="headerlink" title="4.将配置文件写入config"></a>4.将配置文件写入config</h3><p>打开**_config.butterfly.yml<strong>先把</strong>use**这里改了</p><p><img src="https://raw.githubusercontent.com/Peter-JiY/pictures/main//image-20240912124130004.png" alt="image-20240912124130004"></p><p>找到这<strong>giscus</strong>然后对照刚刚复制的script把标红的地方依次填写完整。</p><p><img src="https://raw.githubusercontent.com/Peter-JiY/pictures/main//image-20240912124339222.png" alt="image-20240912124339222"></p><p>然后保存，执行命令。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>稍等片刻查看网站，应该是这样的</p><p><img src="https://raw.githubusercontent.com/Peter-JiY/pictures/main//image-20240912124545071.png" alt="image-20240912124545071"></p><p>快来试试吧。本博客已搭载giscus，欢迎评论。</p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JDBC连接数据池的相关应用（个人理解学习记录）</title>
      <link href="/post/20240911214241.html"/>
      <url>/post/20240911214241.html</url>
      
        <content type="html"><![CDATA[<p>数据连接池的主要概念就是相当于一的超大的水杯喝水，而每次举起杯子又很麻烦，所以就连上吸管去喝，又不断开，保持一定的连接数。</p><p>我的想法是先写一个通用的连接池连接，然后再根据增删改查的相关，再在小模块里面使用不同的sql语句完成相应的操作，最后返还数据池。</p><p>说的直白点就是登录数据库的操作简化成类模块。</p><p>先写一个通用的模板。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.mchange.v2.c3p0.ComboPooledDataSource;</span><br><span class="line"><span class="keyword">import</span> com.mysql.cj.jdbc.Driver;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">C3P0Utils</span> &#123;</span><br><span class="line">    <span class="comment">// 静态数据源实例</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">ComboPooledDataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ComboPooledDataSource</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 配置C3P0连接池</span></span><br><span class="line">            dataSource.setDriverClass(Driver.class.getName());</span><br><span class="line">            dataSource.setJdbcUrl(<span class="string">&quot;jdbc:mysql://localhost:3306/mydb1&quot;</span>);</span><br><span class="line">            dataSource.setUser(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">            dataSource.setPassword(<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">            dataSource.setInitialPoolSize(<span class="number">10</span>);</span><br><span class="line">            dataSource.setMaxPoolSize(<span class="number">20</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取数据库连接</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title function_">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="keyword">return</span> dataSource.getConnection();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">t1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">preparedStatement</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">resultSet</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 获取连接</span></span><br><span class="line">            conn = C3P0Utils.getConnection();</span><br><span class="line">            <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from user&quot;</span>;</span><br><span class="line">            preparedStatement = conn.prepareStatement(sql);</span><br><span class="line">            resultSet = preparedStatement.executeQuery();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 处理结果集</span></span><br><span class="line">            <span class="keyword">while</span> (resultSet.next()) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;User ID: &quot;</span> + resultSet.getInt(<span class="string">&quot;id&quot;</span>) + <span class="string">&quot;, User Name: &quot;</span> + resultSet.getString(<span class="string">&quot;name&quot;</span>));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 关闭资源</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (resultSet != <span class="literal">null</span>) resultSet.close();</span><br><span class="line">                <span class="keyword">if</span> (preparedStatement != <span class="literal">null</span>) preparedStatement.close();</span><br><span class="line">                <span class="keyword">if</span> (conn != <span class="literal">null</span>) conn.close(); <span class="comment">// 将连接返回给连接池</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后再在自己的需求里面执行不同的增删改查语句即可</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开始</title>
      <link href="/post/20240910210822.html"/>
      <url>/post/20240910210822.html</url>
      
        <content type="html"><![CDATA[<p>你好，欢迎来到我的个人博客。在这里我会分享我的一些项目和心得。<br>早几个月前，我刚刚完成了服务器的搭建，并在其上完成了typecho的搭建，选取的是Joe主题。早就听说了github上的page+hexo的玩法，现在我也尝试成功了。</p>]]></content>
      
      
      <categories>
          
          <category> 心情 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
