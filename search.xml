<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>解决OpenCV显示中文乱码（4.11.0）</title>
      <link href="/post/20250407100020.html"/>
      <url>/post/20250407100020.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>最近在尝试玩yolov8训练跌倒识别。然后兴高采烈地把状态类别全部换成中文。结果打开推理，全部乱码。<br>结果一搜索。</p><p>🎉破案成功，卷帘门拉下来吧—— OpenCV 版本是：</p><blockquote><p><strong>🥸 4.11.0</strong></p></blockquote><p>也就是说，现在的 OpenCV：</p><h3 id="❌-不支持中文-cv2-putText-（原始函数）"><a href="#❌-不支持中文-cv2-putText-（原始函数）" class="headerlink" title="❌ 不支持中文 cv2.putText()（原始函数）"></a>❌ <strong>不支持中文 <code>cv2.putText()</code>（原始函数）</strong></h3><ul><li>你画中文会直接乱码 → <code>口口口</code> 复读机上线</li><li>因为这个版本<strong>没带 freetype 模块</strong></li><li>而 freetype 是必须自己编译进来的模块，pip 装是没有的</li></ul><hr><h2 id="🧯-现在有-3-条路可以选"><a href="#🧯-现在有-3-条路可以选" class="headerlink" title="🧯 现在有 3 条路可以选"></a>🧯 现在有 3 条路可以选</h2><hr><h3 id="🟡-路线-1：先用-PIL-绘字（你已经快搞定的方案）"><a href="#🟡-路线-1：先用-PIL-绘字（你已经快搞定的方案）" class="headerlink" title="🟡 路线 1：先用 PIL 绘字（你已经快搞定的方案）"></a>🟡 路线 1：先用 PIL 绘字（你已经快搞定的方案）</h3><p>优点：</p><ul><li><strong>简单、直接</strong></li><li>现有环境不动</li></ul><p>缺点：</p><ul><li>延迟高一点</li><li>代码写法稍微复杂</li></ul><hr><h3 id="🟢-路线-2：装-OpenCV-5-x-rolling-版（尝鲜但爽）"><a href="#🟢-路线-2：装-OpenCV-5-x-rolling-版（尝鲜但爽）" class="headerlink" title="🟢 路线 2：装 OpenCV 5.x rolling 版（尝鲜但爽）"></a>🟢 路线 2：装 OpenCV 5.x rolling 版（尝鲜但爽）</h3><p>命令如下：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip uninstall opencv-python</span><br><span class="line">pip install opencv-python-rolling</span><br></pre></td></tr></table></figure><p>然后直接用 <code>cv2.putText()</code> 绘制中文就不乱码了（OpenCV 5 已内置中文支持 🎉）</p><p>用的是 YOLOv8 + Python 3.8，<strong>兼容没问题</strong>，直接上。</p><hr><h3 id="🔴-路线-3：自己编译-OpenCV-freetype（高级玩家专属）"><a href="#🔴-路线-3：自己编译-OpenCV-freetype（高级玩家专属）" class="headerlink" title="🔴 路线 3：自己编译 OpenCV + freetype（高级玩家专属）"></a>🔴 路线 3：自己编译 OpenCV + freetype（高级玩家专属）</h3><p>适合愿意追求极致性能、干净优雅、不依赖 PIL 的话。</p><p>但 Windows 上编译 OpenCV 就像打一个“Debug 冥想副本”，要下载：</p><ul><li>cmake</li><li>Visual Studio Build Tools</li><li>vcpkg 或手动编译 freetype &amp; harfbuzz</li><li>手动配置 contrib modules</li><li>CMake config 成功 1 次 &#x3D; 成就解锁</li></ul><hr><h2 id="🤔-总结一下你该选哪个"><a href="#🤔-总结一下你该选哪个" class="headerlink" title="🤔 总结一下你该选哪个"></a>🤔 总结一下你该选哪个</h2><table><thead><tr><th>如果你</th><th>选这个</th></tr></thead><tbody><tr><td>想现在立刻跑，不想动环境</td><td>PIL 方案 ✅</td></tr><tr><td>想简洁用原生 <code>putText()</code> 写中文</td><td>rolling 版 OpenCV 5.x ✅</td></tr><tr><td>想干干净净、延迟低、不装 PIL</td><td>自编译 OpenCV + freetype 🧨（警告级难度）</td></tr></tbody></table><hr><p>突然想起来我的小本本还装了WSL。<br>直接在Linux环境编译不就好了，何必在win上面折腾。</p><p><strong>WSL 是编译 OpenCV 的天选之地</strong>，尤其是你不想在 Windows 上点开 57 个对话框和 GUI 的时候。</p><hr><h2 id="✅-用不用-WSL-编译？答案是："><a href="#✅-用不用-WSL-编译？答案是：" class="headerlink" title="✅ 用不用 WSL 编译？答案是："></a>✅ 用不用 WSL 编译？答案是：</h2><h3 id="YES，千万别浪费，WSL-更适合编译-OpenCV！"><a href="#YES，千万别浪费，WSL-更适合编译-OpenCV！" class="headerlink" title="YES，千万别浪费，WSL 更适合编译 OpenCV！"></a><strong>YES，千万别浪费，WSL 更适合编译 OpenCV！</strong></h3><hr><h2 id="🤔-为什么-WSL-更适合？"><a href="#🤔-为什么-WSL-更适合？" class="headerlink" title="🤔 为什么 WSL 更适合？"></a>🤔 为什么 WSL 更适合？</h2><table><thead><tr><th>比较点</th><th>Windows 编译</th><th>WSL 编译</th></tr></thead><tbody><tr><td>依赖管理</td><td>杂乱 + GUI 地狱</td><td><strong>apt 一键装干净爽快</strong></td></tr><tr><td>脚本运行</td><td>容易路径问题</td><td>没有奇怪的盘符</td></tr><tr><td>构建流程</td><td>Visual Studio + CMake GUI</td><td><strong>命令行走天下</strong></td></tr><tr><td>中文路径 &amp; 空格</td><td>容易出事</td><td>零风险</td></tr><tr><td>速度</td><td>会慢一点</td><td><strong>快很多</strong>（尤其用 WSL2）</td></tr></tbody></table><hr><h2 id="✨-WSL-上该怎么做？"><a href="#✨-WSL-上该怎么做？" class="headerlink" title="✨ WSL 上该怎么做？"></a>✨ WSL 上该怎么做？</h2><p>以下是极简路线图：</p><hr><h3 id="🧱-Step-1：更新系统-安装依赖"><a href="#🧱-Step-1：更新系统-安装依赖" class="headerlink" title="🧱 Step 1：更新系统 &amp; 安装依赖"></a>🧱 Step 1：更新系统 &amp; 安装依赖</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt update</span><br><span class="line"><span class="built_in">sudo</span> apt install -y build-essential cmake git pkg-config \</span><br><span class="line">    libfreetype6-dev libharfbuzz-dev libpng-dev libjpeg-dev libtiff-dev \</span><br><span class="line">    libavcodec-dev libavformat-dev libswscale-dev libv4l-dev \</span><br><span class="line">    libxvidcore-dev libx264-dev libgtk-3-dev libatlas-base-dev \</span><br><span class="line">    gfortran python3-dev python3-pip</span><br></pre></td></tr></table></figure><hr><h3 id="🧬-Step-2：拉源码"><a href="#🧬-Step-2：拉源码" class="headerlink" title="🧬 Step 2：拉源码"></a>🧬 Step 2：拉源码</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/opencv/opencv.git</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/opencv/opencv_contrib.git</span><br><span class="line"><span class="built_in">cd</span> opencv</span><br><span class="line"><span class="built_in">mkdir</span> build &amp;&amp; <span class="built_in">cd</span> build</span><br></pre></td></tr></table></figure><hr><h3 id="⚙️-Step-3：CMake-配置"><a href="#⚙️-Step-3：CMake-配置" class="headerlink" title="⚙️ Step 3：CMake 配置"></a>⚙️ Step 3：CMake 配置</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cmake -D CMAKE_BUILD_TYPE=Release \</span><br><span class="line">      -D CMAKE_INSTALL_PREFIX=/usr/local \</span><br><span class="line">      -D OPENCV_EXTRA_MODULES_PATH=~/opencv_contrib/modules \</span><br><span class="line">      -D WITH_FREETYPE=ON \</span><br><span class="line">      -D WITH_GTK=ON \</span><br><span class="line">      -D BUILD_opencv_python3=ON \</span><br><span class="line">      -D PYTHON3_EXECUTABLE=$(<span class="built_in">which</span> python3) \</span><br><span class="line">      -D PYTHON3_INCLUDE_DIR=$(python3 -c <span class="string">&quot;from sysconfig import get_paths as gp; print(gp()[&#x27;include&#x27;])&quot;</span>) \</span><br><span class="line">      -D PYTHON3_LIBRARY=<span class="variable">$CONDA_PREFIX</span>/lib/libpython3.10.so \</span><br><span class="line">      -D PYTHON3_PACKAGES_PATH=$(python3 -c <span class="string">&quot;from distutils.sysconfig import get_python_lib&quot;</span>) \</span><br><span class="line">      ..</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><p><img src="https://raw.githubusercontent.com/Peter-JiY/pictures/main//2024/image-20250407113353906.png" alt="image-20250407113353906"></p><h3 id="🚀-Step-4：编译并安装"><a href="#🚀-Step-4：编译并安装" class="headerlink" title="🚀 Step 4：编译并安装"></a>🚀 Step 4：编译并安装</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">make -j$(<span class="built_in">nproc</span>)</span><br><span class="line"><span class="built_in">sudo</span> make install</span><br></pre></td></tr></table></figure><p>大概 10~30 分钟，取决于你的电脑，别急，泡杯枸杞水。</p><hr><h3 id="🧪-Step-5：验证中文显示"><a href="#🧪-Step-5：验证中文显示" class="headerlink" title="🧪 Step 5：验证中文显示"></a>🧪 Step 5：验证中文显示</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">img = np.ones((<span class="number">400</span>, <span class="number">800</span>, <span class="number">3</span>), dtype=np.uint8) * <span class="number">255</span></span><br><span class="line"></span><br><span class="line">ft2 = cv2.freetype.createFreeType2()</span><br><span class="line">ft2.loadFontData(<span class="string">&quot;/home/peter/NotoSansCJKsc-Regular.otf&quot;</span>, <span class="number">0</span>)  <span class="comment"># 用你自己的路径！</span></span><br><span class="line"></span><br><span class="line">ft2.putText(img, <span class="string">&quot;我终于成功了！&quot;</span>, (<span class="number">50</span>, <span class="number">200</span>), fontHeight=<span class="number">60</span>,</span><br><span class="line">            color=(<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>), thickness=-<span class="number">1</span>,</span><br><span class="line">            line_type=cv2.LINE_AA, bottomLeftOrigin=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">cv2.imshow(<span class="string">&quot;庆功图&quot;</span>, img)</span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br><span class="line">cv2.destroyAllWindows()</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line">cv2.freetype.createFreeType2()</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Peter-JiY/pictures/main//2024/image-20250407125634224.png" alt="image-20250407125634224"></p><p>如果没报错 &#x3D; freetype 模块成功加载！🥳</p><hr><h3 id="🧠-Bonus：让你的-Python-用上这个-OpenCV"><a href="#🧠-Bonus：让你的-Python-用上这个-OpenCV" class="headerlink" title="🧠 Bonus：让你的 Python 用上这个 OpenCV"></a>🧠 Bonus：让你的 Python 用上这个 OpenCV</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip uninstall opencv-python</span><br><span class="line">python3 -m pip install numpy</span><br><span class="line"><span class="built_in">cd</span> ~/opencv/build/python_loader</span><br><span class="line"><span class="built_in">sudo</span> python3 setup.py install</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import cv2</span><br><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">img = np.zeros((400, 800, 3), dtype=np.uint8)</span><br><span class="line">cv2.putText(img, &quot;𠮷野家™钛合金♻️&quot;, (50, 200), cv2.FONT_HERSHEY_SIMPLEX, 2, (255, 255, 0), 4, cv2.LINE_AA)</span><br><span class="line">cv2.imshow(&quot;Test&quot;, img)</span><br><span class="line">cv2.waitKey(0)</span><br><span class="line">cv2.destroyAllWindows()</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>开启tun模式时github相关推送失败</title>
      <link href="/post/20250314154605.html"/>
      <url>/post/20250314154605.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><hr><h3 id="修改-SSH-配置，使用-443-端口"><a href="#修改-SSH-配置，使用-443-端口" class="headerlink" title="修改 SSH 配置，使用 443 端口"></a>修改 SSH 配置，使用 443 端口</h3><ol><li><p>在你的 <code>~/.ssh/config</code> 文件中（如果没有就创建一个），添加下面的配置：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Host github.com</span><br><span class="line">  HostName ssh.github.com</span><br><span class="line">  Port 443</span><br><span class="line">  IdentityFile ~/.ssh/id_rsa</span><br></pre></td></tr></table></figure><p>这样一来，当你连接 GitHub 时，会通过 443 端口（通常不会被防火墙屏蔽或被 clash 拦截）进行连接。</p></li><li><p>确保 Hexo 部署配置中使用的是类似 <code>git@github.com:username/repo.git</code> 的地址。SSH 配置生效后，就能自动使用 443 端口进行连接。</p></li></ol><h3 id="如何测试"><a href="#如何测试" class="headerlink" title="如何测试"></a>如何测试</h3><p>你可以通过 SSH 命令来测试连接是否正常。具体步骤如下：</p><ol><li><p><strong>测试默认配置：</strong><br>打开终端，输入以下命令：  </p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><p>如果配置正确，你通常会看到类似如下提示：  </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Hi &lt;你的用户名&gt;! You&#x27;ve successfully authenticated, but GitHub does not provide shell access.</span><br></pre></td></tr></table></figure><p>如果第一次连接会提示确认主机的指纹，输入 “yes” 即可。</p></li><li><p><strong>查看详细信息（可选）：</strong><br>如果你希望看到更多调试信息，可以加上 <code>-v</code> 参数：  </p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh -vT git@github.com</span><br></pre></td></tr></table></figure><p>这会显示连接过程中的详细日志，帮助你确认是否走了443端口以及配置是否生效。</p></li><li><p><strong>直接测试443端口（可选）：</strong><br>如果你想明确测试使用443端口连接，可以运行：  </p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh -T -p 443 git@ssh.github.com</span><br></pre></td></tr></table></figure><p>成功后同样会显示 GitHub 的欢迎信息。</p></li></ol><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>整个过程主要涉及以下几个知识点和处理逻辑：</p><ol><li><p><strong>SSH 协议和身份验证机制</strong>  </p><ul><li><strong>SSH 协议</strong>：SSH（Secure Shell）用于在不安全的网络环境中安全地连接到远程服务器。它采用公钥加密技术进行身份验证和数据传输。  </li><li><strong>身份验证</strong>：客户端利用私钥与服务器对应的公钥进行认证，从而确认双方的身份。GitHub 会验证你提供的 SSH 密钥是否与账户中登记的公钥一致。</li></ul></li><li><p><strong>SSH 配置文件 (~&#x2F;.ssh&#x2F;config)</strong>  </p><ul><li><strong>配置文件语法</strong>：通过在配置文件中指定 Host、HostName、Port、IdentityFile 等参数，可以定制化连接行为。  </li><li><strong>端口和主机名重定向</strong>：当默认的 22 端口因防火墙或代理问题不可用时，可以在配置文件中指定使用 GitHub 提供的 ssh.github.com 和 443 端口。这样就能绕过网络限制，保证连接正常。</li></ul></li><li><p><strong>主机密钥验证 (known_hosts)</strong>  </p><ul><li><strong>首次连接确认</strong>：当首次连接到一个服务器时，SSH 客户端会获取服务器的公钥指纹，并要求用户确认，以防中间人攻击。确认后，这个指纹会保存到 <code>known_hosts</code> 文件中，后续连接时自动信任该服务器。  </li><li><strong>安全机制</strong>：这一机制确保你连接的是预期的服务器，而不是被篡改的目标。</li></ul></li><li><p><strong>网络和代理知识</strong>  </p><ul><li><strong>端口问题</strong>：在某些网络环境下，22 端口可能会被限制或代理处理，导致连接失败。通过改用 443 端口（通常用于 HTTPS 流量），可以绕过这些限制。  </li><li><strong>代理与直连</strong>：在使用如 Clash 的代理工具时，可能会影响 SSH 的默认连接行为。通过手动配置 SSH 使用特定端口，可以让连接走直连通道，从而不受代理影响。</li></ul></li></ol><hr><p><strong>处理逻辑总结：</strong></p><ol><li><p><strong>读取 SSH 配置</strong><br>SSH 客户端首先查找 <code>~/.ssh/config</code> 中匹配 <code>github.com</code> 的配置，根据配置使用 <code>ssh.github.com</code> 作为主机名，并指定端口为 443。</p></li><li><p><strong>建立连接与验证主机密钥</strong><br>客户端向指定地址发起连接，并接收到服务器的公钥指纹。由于这是首次连接，会提示你确认该指纹，确认后写入 <code>known_hosts</code> 文件中。</p></li><li><p><strong>密钥交换与身份验证</strong><br>连接建立后，SSH 客户端使用配置中指定的私钥进行身份验证，GitHub 验证密钥后允许连接。</p></li><li><p><strong>连接成功提示</strong><br>由于 GitHub 不提供真正的 shell 访问，成功验证后只会返回一条欢迎信息，说明认证和连接都正常。</p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> ssh </tag>
            
            <tag> tun </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>规则集匹配</title>
      <link href="/post/20250314152453.html"/>
      <url>/post/20250314152453.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>下面的规则配置一般采用三段式的格式，格式为：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;规则类型,匹配内容,代理策略&#x27;</span><br></pre></td></tr></table></figure><p>各部分的含义如下：</p><ol><li><p><strong>规则类型</strong>  </p><ul><li><p><strong>DOMAIN</strong>：表示<strong>精确匹配</strong>。仅当目标域名与规则中指定的域名完全一致时，才会命中此规则。<br><em>例如：</em>  </p><ul><li><code>&#39;DOMAIN,abc.io,DIRECT&#39;</code> 仅匹配域名完全为 <em>abc.io</em> 的请求。</li></ul></li><li><p><strong>DOMAIN-SUFFIX</strong>：表示<strong>后缀匹配</strong>。当目标域名以指定内容结尾时，即视为匹配成功。<br><em>例如：</em>  </p><ul><li><code>&#39;DOMAIN-SUFFIX,services.googleapis.cn,其他&#39;</code> 会匹配所有以 <em>services.googleapis.cn</em> 结尾的域名，如 _abc.services.googleapis.cn_。</li></ul></li><li><p><strong>DOMAIN-KEYWORD</strong>：表示<strong>关键词匹配</strong>。只要目标域名中包含指定关键词，就认为匹配。<br><em>例如：</em>  </p><ul><li><code>&#39;DOMAIN-KEYWORD,alicdn,DIRECT&#39;</code> 只要域名中含有 <em>alicdn</em> 字样，就会命中此规则。</li></ul></li></ul></li><li><p><strong>匹配内容</strong>  </p><ul><li>根据规则类型的不同，这部分可以是完整域名、域名后缀或一个关键词。  </li><li>精确匹配要求完全相同，后缀匹配则只关注结尾部分，而关键词匹配则是在任意位置查找关键词。</li></ul></li><li><p><strong>代理策略</strong>  </p><ul><li>规则的第三部分用于指定连接时采用的代理策略。  </li><li><strong>DIRECT</strong> 表示直接连接，不使用代理。  </li><li>此处用 <strong>其他</strong> 代替原规则中的 _轻云_，表示采用预先设定的某个代理服务器策略。</li></ul></li></ol><p><strong>匹配顺序说明：</strong></p><ul><li>一般情况下，规则是按照文件中从上到下的顺序进行匹配，遇到第一个匹配成功的规则后即停止检查后续规则。  </li><li>因此，规则的排列顺序很重要，越靠前的规则具有更高的优先级。</li></ul><p><strong>总结：</strong></p><ul><li><strong>DOMAIN</strong> 用于精确匹配整个域名；  </li><li><strong>DOMAIN-SUFFIX</strong> 用于匹配以特定字符串结尾的域名；  </li><li><strong>DOMAIN-KEYWORD</strong> 用于匹配域名中包含某个关键词的情况；  </li><li>代理策略 <strong>DIRECT</strong> 表示直连，<strong>其他</strong> 则表示采用代理。</li></ul><p>通过这种方式，可以灵活地根据目标域名来选择是否使用代理或直连，从而达到优化网络访问或实现访问控制的目的。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>学习yolo5算法</title>
      <link href="/post/20250305125458.html"/>
      <url>/post/20250305125458.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><hr><p>分割线</p><h2 id="一、寻找数据集"><a href="#一、寻找数据集" class="headerlink" title="一、寻找数据集"></a>一、寻找数据集</h2><p>在此之前我已经将yolo5的环境装配好了。下面就开始训练模型<br>训练模型第一步应该干什么呢？</p><p>找数据！！！<br>数据无价，最后在我的几经筛选之下，找到了这个数据</p><p><a href="https://www.kaggle.com/datasets/tuyenldvn/falldataset-imvia">https://www.kaggle.com/datasets/tuyenldvn/falldataset-imvia</a><br>有关检测跌倒的数据，10G开下。</p><p>下载下来发现数据集全是视频和txt文档，文档经过我的查阅是记录跌倒的时间帧和方位。</p><hr><p>以video（1）.avi为例，</p><p><strong>前两行</strong>：<code>48</code> 和 <code>80</code> 通常表示该视频跌倒事件的开始帧与结束帧（可根据官方文档或 README 确认）。</p><p><strong>后续每行</strong>：<code>frame_index, class_id, x_min, y_min, x_max, y_max</code>。</p><ul><li>例如 <code>5,1,292,152,311,240</code> 表示<strong>第5帧</strong>、<strong>类别为1</strong>、**左上角(292,152)<strong>、</strong>右下角(311,240)**。</li></ul><h2 id="二、处理数据集"><a href="#二、处理数据集" class="headerlink" title="二、处理数据集"></a>二、处理数据集</h2><p>需要将每个视频拆分成视频帧，我们就以每秒25帧来切割，正好我的电脑上就有ffmepg，我就用了命令</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ffmpeg -i &quot;video (1).avi&quot; -r 25 frames_%04d.jpg</span><br></pre></td></tr></table></figure><p>但是视频的数量也太多了，所以我又写了一个批处理的来处理文件里的所有同类视频</p><figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="built_in">setlocal</span> enabledelayedexpansion</span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">REM =============================</span></span><br><span class="line"><span class="comment">REM 配置路径</span></span><br><span class="line"><span class="comment">REM =============================</span></span><br><span class="line"><span class="comment">REM 这里是视频所在目录</span></span><br><span class="line"><span class="built_in">set</span> &quot;VIDEOS_DIR=E:\IDMdownload\archive\Coffee_room_01\Coffee_room_01\Videos&quot;</span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">REM 这里是想要存放提取帧的根目录</span></span><br><span class="line"><span class="built_in">set</span> &quot;FRAMES_DIR=E:\IDMdownload\archive\Coffee_room_01\Coffee_room_01\Frames&quot;</span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">REM =============================</span></span><br><span class="line"><span class="comment">REM 批量处理 .avi 文件</span></span><br><span class="line"><span class="comment">REM =============================</span></span><br><span class="line"><span class="keyword">for</span> <span class="variable">%%f</span> <span class="keyword">in</span> (&quot;<span class="variable">%VIDEOS_DIR%</span>\*.avi&quot;) <span class="keyword">do</span> (</span><br><span class="line"><span class="comment">    REM 1) %%f 表示每个视频的完整路径（含文件名）</span></span><br><span class="line"><span class="comment">    REM 2) %%~nf 表示文件名不带扩展名，例如 &quot;video (1)&quot; </span></span><br><span class="line">    <span class="built_in">set</span> &quot;BASENAME=<span class="variable">%%~</span>nf&quot;</span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    REM 构造输出文件夹： &lt;FRAMES_DIR&gt;/&lt;视频文件名&gt;_frames</span></span><br><span class="line">    <span class="built_in">set</span> &quot;OUTPUT_DIR=<span class="variable">%FRAMES_DIR%</span>\<span class="variable">!BASENAME!</span>_frames&quot;</span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    REM 如果不存在，则创建</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> <span class="keyword">exist</span> &quot;<span class="variable">!OUTPUT_DIR!</span>&quot; (</span><br><span class="line">        <span class="built_in">mkdir</span> &quot;<span class="variable">!OUTPUT_DIR!</span>&quot;</span><br><span class="line">        <span class="built_in">echo</span> Created directory: <span class="variable">!OUTPUT_DIR!</span></span><br><span class="line">    )</span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    REM 使用 ffmpeg 提取帧</span></span><br><span class="line"><span class="comment">    REM -r 25 表示每秒提取 25 帧，可根据需求调整</span></span><br><span class="line">    ffmpeg -i &quot;<span class="variable">%%f</span>&quot; -r <span class="number">25</span> &quot;<span class="variable">!OUTPUT_DIR!</span>\frame_<span class="variable">%%0</span>4d.jpg&quot;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">echo</span> Processed <span class="variable">%%f</span> -&gt; <span class="variable">!OUTPUT_DIR!</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="built_in">pause</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>下一步开始使用yolo5训练</p><h2 id="三、疑问"><a href="#三、疑问" class="headerlink" title="三、疑问"></a>三、疑问</h2><p>发现数据集中的数据存在一定的问题。查阅readme文档也没有定义。readme文档中说有关数据集的文档中存储的数据依次为：</p><p>帧，框高，框宽，框的中心坐标。</p><p><img src="https://raw.githubusercontent.com/Peter-JiY/pictures/main//2024/image-20250319131251374.png" alt="image-20250319131251374"></p><p>以一为例，数据中一行出现了6个数据，我理解为</p><p>​<strong>帧编号，未知，框高，框宽，中心坐标</strong></p><p><strong>未知</strong>：我觉得是状态显示</p><ul><li>1——normal（正常）</li><li>8——fall（摔倒）</li><li>7——（倒地）</li></ul><p>但是存在问题我在下面好几个文档中发现了1、2、3、4</p><p>以下是我猜测</p><ul><li>2——应当为跌倒的过程</li><li>4——应当为侧躺在地上</li><li>5——应当为平趴在地上</li></ul><p>这些只是假设。</p><hr><p>先不管状态对应的什么意思，我们先把数据处理成yolo格式的，进行归一化处理。</p><p><img src="https://raw.githubusercontent.com/Peter-JiY/pictures/main//2024/image-20250319172028751.png" alt="image-20250319172028751"></p><p>划分数据集，下一步进行yolo训练</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">train:</span> <span class="string">E:\IDMdownload\archive\Coffee_room_01\Coffee_room_01\Dataset\train\images</span></span><br><span class="line"><span class="attr">val:</span> <span class="string">E:\IDMdownload\archive\Coffee_room_01\Coffee_room_01\Dataset\val\images</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 这里根据你的类别数量定义类别名称，假设使用标签中原始的数字：</span></span><br><span class="line"><span class="comment"># 如果你有6个状态，则可能需要如下定义（请根据实际映射修改名称）：</span></span><br><span class="line"><span class="attr">names:</span></span><br><span class="line">  <span class="attr">0:</span> <span class="string">&quot;state_1&quot;</span></span><br><span class="line">  <span class="attr">1:</span> <span class="string">&quot;state_7&quot;</span></span><br><span class="line">  <span class="attr">2:</span> <span class="string">&quot;state_8&quot;</span></span><br><span class="line">  <span class="attr">3:</span> <span class="string">&quot;state_2&quot;</span></span><br><span class="line">  <span class="attr">4:</span> <span class="string">&quot;state_3&quot;</span></span><br><span class="line">  <span class="attr">5:</span> <span class="string">&quot;state_4&quot;</span></span><br><span class="line">  <span class="attr">6:</span> <span class="string">&quot;state_5&quot;</span></span><br><span class="line"> </span><br></pre></td></tr></table></figure><p>撰写yaml的文件，方便yolo推理</p><p>下一步开始推理</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python train.py --img 320 --batch 16 --epochs 50 --data fall.yaml --weights yolov5s.pt</span><br></pre></td></tr></table></figure><p>下面详细解读一下命令：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python train.py --img 320 --batch 16 --epochs 50 --data fall.yaml --weights yolov5s.pt</span><br></pre></td></tr></table></figure><h3 id="1-python-train-py"><a href="#1-python-train-py" class="headerlink" title="1. python train.py"></a>1. <code>python train.py</code></h3><ul><li>这是运行 YOLOv5 训练脚本的入口文件。<code>train.py</code> 是 YOLOv5 提供的训练脚本，负责加载数据、构建模型、进行训练并保存权重。</li></ul><h3 id="2-参数-img-320"><a href="#2-参数-img-320" class="headerlink" title="2. 参数 --img 320"></a>2. 参数 <code>--img 320</code></h3><ul><li>指定输入图像的尺寸为 320×320（YOLOv5 会将原始图像按比例缩放到该尺寸）。</li><li>如果原始图像分辨率为 320×240，也可以用 320 作为短边尺寸。一般建议选择与训练数据相似的尺寸以兼顾计算效率和细节保留。</li></ul><h3 id="3-参数-batch-16"><a href="#3-参数-batch-16" class="headerlink" title="3. 参数 --batch 16"></a>3. 参数 <code>--batch 16</code></h3><ul><li>指定每个训练批次（batch）的图片数为 16。</li><li>批次大小与 GPU 显存有关：RTX 3070 通常能够支持 16 的 batch size；如果显存不足可以减小该值。</li></ul><h3 id="4-参数-epochs-50"><a href="#4-参数-epochs-50" class="headerlink" title="4. 参数 --epochs 50"></a>4. 参数 <code>--epochs 50</code></h3><ul><li>表示整个训练过程中遍历整个数据集 50 轮（epoch）。</li><li>训练轮数决定了模型训练的充分程度，初次实验可以设置 50 轮，之后根据验证集表现和收敛情况再做调整。</li></ul><h3 id="5-参数-data-fall-yaml"><a href="#5-参数-data-fall-yaml" class="headerlink" title="5. 参数 --data fall.yaml"></a>5. 参数 <code>--data fall.yaml</code></h3><ul><li><p>指定数据集的配置文件为 <code>fall.yaml</code>。</p></li><li><p>该 YAML 文件通常包含以下信息：</p><ul><li><p><code>train</code> 和 <code>val</code> 两个路径，分别指向训练集和验证集的图片目录（例如：<code>Dataset/images/train</code> 和 <code>Dataset/images/val</code>）。</p></li><li><pre><code>names<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"> 字段：定义所有类别的名称，例如：</span><br><span class="line"></span><br><span class="line">```yaml</span><br><span class="line">names:</span><br><span class="line">  0: &quot;state_1&quot;</span><br><span class="line">  1: &quot;state_7&quot;</span><br><span class="line">  2: &quot;state_8&quot;</span><br><span class="line">  3: &quot;state_2&quot;</span><br><span class="line">  4: &quot;state_3&quot;</span><br><span class="line">  5: &quot;state_4&quot;</span><br><span class="line">  6: &quot;state_5&quot;</span><br></pre></td></tr></table></figure></code></pre></li><li><p>确保 YAML 文件的格式和路径与实际数据集结构一致。</p></li></ul></li></ul><p><img src="https://raw.githubusercontent.com/Peter-JiY/pictures/main//2024/image-20250320205405309.png" alt="image-20250320205405309"></p><p><img src="https://raw.githubusercontent.com/Peter-JiY/pictures/main//2024/image-20250320205524463.png" alt="image-20250320205524463"></p><p><img src="https://raw.githubusercontent.com/Peter-JiY/pictures/main//2024/image-20250320210133476.png" alt="image-20250320210133476"></p><p>很遗憾，报错了，状态映射不对。</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">train:</span> <span class="string">E:\IDMdownload\archive\Coffee_room_01\Coffee_room_01\Dataset\train\images</span></span><br><span class="line"><span class="attr">val:</span> <span class="string">E:\IDMdownload\archive\Coffee_room_01\Coffee_room_01\Dataset\val\images</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 这里根据你的类别数量定义类别名称，假设使用标签中原始的数字：</span></span><br><span class="line"><span class="comment"># 如果你有6个状态，则可能需要如下定义（请根据实际映射修改名称）：</span></span><br><span class="line"><span class="attr">names:</span></span><br><span class="line">  <span class="attr">1:</span> <span class="string">&quot;state_1&quot;</span></span><br><span class="line">  <span class="attr">2:</span> <span class="string">&quot;state_2&quot;</span></span><br><span class="line">  <span class="attr">3:</span> <span class="string">&quot;state_3&quot;</span></span><br><span class="line">  <span class="attr">4:</span> <span class="string">&quot;state_4&quot;</span></span><br><span class="line">  <span class="attr">5:</span> <span class="string">&quot;state_5&quot;</span></span><br><span class="line">  <span class="attr">6:</span> <span class="string">&quot;state_6&quot;</span></span><br><span class="line">  <span class="attr">7:</span> <span class="string">&quot;state_7&quot;</span></span><br><span class="line">  <span class="attr">8:</span> <span class="string">&quot;state 8&quot;</span></span><br><span class="line"> </span><br></pre></td></tr></table></figure><h2 id="四、处理错误"><a href="#四、处理错误" class="headerlink" title="四、处理错误"></a>四、处理错误</h2><h3 id="1-在训练时，YOLOv5-检查到部分图片对应的标签文件中的坐标数据存在问题，具体问题是“non-normalized-or-out-of-bounds-coordinates”（未归一化或超出边界的坐标）。"><a href="#1-在训练时，YOLOv5-检查到部分图片对应的标签文件中的坐标数据存在问题，具体问题是“non-normalized-or-out-of-bounds-coordinates”（未归一化或超出边界的坐标）。" class="headerlink" title="1.在训练时，YOLOv5 检查到部分图片对应的标签文件中的坐标数据存在问题，具体问题是“non-normalized or out of bounds coordinates”（未归一化或超出边界的坐标）。"></a>1.在训练时，YOLOv5 检查到部分图片对应的标签文件中的坐标数据存在问题，具体问题是“non-normalized or out of bounds coordinates”（未归一化或超出边界的坐标）。</h3><hr><h4 id="1-什么是“non-normalized-or-out-of-bounds-coordinates”"><a href="#1-什么是“non-normalized-or-out-of-bounds-coordinates”" class="headerlink" title="1. 什么是“non-normalized or out of bounds coordinates”"></a>1. 什么是“non-normalized or out of bounds coordinates”</h4><ul><li><p><strong>归一化坐标要求</strong>：<br> YOLO 格式要求标签中的坐标值必须归一化到 [0, 1] 范围内。也就是说，x_center、y_center、宽度和高度的值都应该是图像宽度和高度的比例，而不是绝对像素值。</p></li><li><p><strong>超出边界</strong>：<br> 如果标签中的归一化坐标超过了 1 或小于 0（比如 1.2167 或 1.0042），则表示目标框的坐标计算有误或者没有进行正确归一化。</p></li><li><p>确保在转换标签时，对所有边界框的中心坐标和宽高都进行了归一化处理。例如，如果图像尺寸为 320×240，那么中心坐标应除以 320 和 240，宽度和高度也应除以对应尺寸。</p></li><li><p>检查转换脚本，确保计算公式正确：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">x_center_norm = center_x / IMG_WIDTH</span><br><span class="line">y_center_norm = center_y / IMG_HEIGHT</span><br><span class="line">width_norm = box_width / IMG_WIDTH</span><br><span class="line">height_norm = box_height / IMG_HEIGHT</span><br></pre></td></tr></table></figure></li></ul><p>标签文件数值看起来并不是“框高、框宽、中心坐标”，而更像是“框左上角和右下角的坐标”。例如，对于行</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">5,1,292,152,311,240</span><br></pre></td></tr></table></figure><p>如果解释为：</p><ul><li>frame_number &#x3D; 5</li><li>state &#x3D; 1</li><li>x_min &#x3D; 292, y_min &#x3D; 152</li><li>x_max &#x3D; 311, y_max &#x3D; 240</li></ul><p>那么：</p><ul><li>计算框宽 &#x3D; 311 – 292 &#x3D; 19</li><li>计算框高 &#x3D; 240 – 152 &#x3D; 88</li><li>中心坐标 &#x3D; ((292+311)&#x2F;2, (152+240)&#x2F;2) &#x3D; (301.5, 196)</li></ul><p>归一化后：</p><ul><li>x_center_norm &#x3D; 301.5 &#x2F; 320 ≈ 0.942</li><li>y_center_norm &#x3D; 196 &#x2F; 240 ≈ 0.8167</li><li>width_norm &#x3D; 19 &#x2F; 320 ≈ 0.0594</li><li>height_norm &#x3D; 88 &#x2F; 240 ≈ 0.3667</li></ul><p>这就符合要求，不会超过 1。而目前的转换函数直接把第三、四列当作 box_height 和 box_width、第五、第六列当作中心坐标计算归一化，结果就会出现 292&#x2F;240 ≈ 1.2167 这样的数值，从而导致“non-normalized or out of bounds coordinates”的错误。</p><p>因此，需要修改转换函数，使其先根据 x_min、y_min、x_max、y_max 计算出中心坐标和宽高，再归一化。</p><p>下面是修改后的完整代码，重点在于更新转换函数以及处理标签文件时的字段解释：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> glob</span><br><span class="line"></span><br><span class="line"><span class="comment"># --------------------------</span></span><br><span class="line"><span class="comment"># 1. 配置参数：请根据实际情况修改</span></span><br><span class="line"><span class="comment"># --------------------------</span></span><br><span class="line">annotations_dir = <span class="string">r&quot;E:\IDMdownload\archive\Coffee_room_01\Coffee_room_01\Annotation_files&quot;</span></span><br><span class="line">frames_root_dir = <span class="string">r&quot;E:\IDMdownload\archive\Coffee_room_01\Coffee_room_01\Frames&quot;</span></span><br><span class="line">output_labels_root = <span class="string">r&quot;E:\IDMdownload\archive\Coffee_room_01\Coffee_room_01\Labels&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 图像尺寸（Le2i 数据集一般为 320x240）</span></span><br><span class="line">IMG_WIDTH, IMG_HEIGHT = <span class="number">320</span>, <span class="number">240</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># --------------------------</span></span><br><span class="line"><span class="comment"># 2. 定义边界框转换函数（修改后）</span></span><br><span class="line"><span class="comment"># --------------------------</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">convert_bbox_from_corners</span>(<span class="params">x_min, y_min, x_max, y_max, img_w, img_h</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    根据左上角 (x_min, y_min) 和右下角 (x_max, y_max) 计算 YOLO 格式的归一化坐标：</span></span><br><span class="line"><span class="string">    输出：x_center_norm, y_center_norm, width_norm, height_norm</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    box_width = x_max - x_min</span><br><span class="line">    box_height = y_max - y_min</span><br><span class="line">    x_center = (x_min + x_max) / <span class="number">2.0</span></span><br><span class="line">    y_center = (y_min + y_max) / <span class="number">2.0</span></span><br><span class="line"></span><br><span class="line">    x_center_norm = x_center / img_w</span><br><span class="line">    y_center_norm = y_center / img_h</span><br><span class="line">    width_norm = box_width / img_w</span><br><span class="line">    height_norm = box_height / img_h</span><br><span class="line">    <span class="keyword">return</span> x_center_norm, y_center_norm, width_norm, height_norm</span><br><span class="line"></span><br><span class="line"><span class="comment"># --------------------------</span></span><br><span class="line"><span class="comment"># 3. 定义处理单个标签文件的函数</span></span><br><span class="line"><span class="comment"># --------------------------</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">process_annotation_file</span>(<span class="params">annotation_path</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    处理单个标签文件，将其转换为 YOLO 格式。</span></span><br><span class="line"><span class="string">    标签文件格式：假设每行记录为</span></span><br><span class="line"><span class="string">       frame_number, state, x_min, y_min, x_max, y_max</span></span><br><span class="line"><span class="string">    如果文件前两行只包含单个数字，则认为是跌倒开始和结束帧，否则，所有行均为记录。</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    base_name = os.path.splitext(os.path.basename(annotation_path))[<span class="number">0</span>]  <span class="comment"># 例如 &quot;video (1)&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 构造对应的视频帧文件夹路径，假设命名规则为 Frames\&#123;base_name&#125;_frames</span></span><br><span class="line">    video_frames_dir = os.path.join(frames_root_dir, <span class="string">f&quot;<span class="subst">&#123;base_name&#125;</span>_frames&quot;</span>)</span><br><span class="line">    <span class="comment"># 构造输出标签文件夹路径</span></span><br><span class="line">    output_label_dir = os.path.join(output_labels_root, base_name)</span><br><span class="line">    os.makedirs(output_label_dir, exist_ok=<span class="literal">True</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(annotation_path, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        lines = f.readlines()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> lines:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;文件 <span class="subst">&#123;annotation_path&#125;</span> 为空，跳过&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 判断文件格式：如果第一行只有一个字段，则认为前两行是跌倒开始和结束帧</span></span><br><span class="line">    first_line_parts = lines[<span class="number">0</span>].strip().split(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(first_line_parts) == <span class="number">1</span>:</span><br><span class="line">        <span class="comment"># 读取跌倒开始和结束帧（暂不使用）</span></span><br><span class="line">        fall_start = <span class="built_in">int</span>(lines[<span class="number">0</span>].strip())</span><br><span class="line">        fall_end = <span class="built_in">int</span>(lines[<span class="number">1</span>].strip())</span><br><span class="line">        annotation_lines = lines[<span class="number">2</span>:]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        annotation_lines = lines</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 逐行处理记录</span></span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> annotation_lines:</span><br><span class="line">        line = line.strip()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> line:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        parts = line.split(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(parts) != <span class="number">6</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;格式错误，跳过行：<span class="subst">&#123;line&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            frame_number = <span class="built_in">int</span>(parts[<span class="number">0</span>])</span><br><span class="line">            state = <span class="built_in">int</span>(parts[<span class="number">1</span>])</span><br><span class="line">            x_min = <span class="built_in">float</span>(parts[<span class="number">2</span>])</span><br><span class="line">            y_min = <span class="built_in">float</span>(parts[<span class="number">3</span>])</span><br><span class="line">            x_max = <span class="built_in">float</span>(parts[<span class="number">4</span>])</span><br><span class="line">            y_max = <span class="built_in">float</span>(parts[<span class="number">5</span>])</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;解析错误，跳过行 <span class="subst">&#123;line&#125;</span>: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 如果无有效框，则跳过</span></span><br><span class="line">        <span class="keyword">if</span> x_min == <span class="number">0</span> <span class="keyword">and</span> y_min == <span class="number">0</span> <span class="keyword">and</span> x_max == <span class="number">0</span> <span class="keyword">and</span> y_max == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 直接使用原始状态作为类别</span></span><br><span class="line">        yolo_class = state</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 使用新的转换函数，将左上角和右下角转换为YOLO格式</span></span><br><span class="line">        x_c_norm, y_c_norm, w_norm, h_norm = convert_bbox_from_corners(x_min, y_min, x_max, y_max, IMG_WIDTH, IMG_HEIGHT)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 构造对应帧图像文件名，假设图像命名为 frame_0001.jpg, frame_0002.jpg, ...</span></span><br><span class="line">        frame_filename = <span class="string">f&quot;frame_<span class="subst">&#123;frame_number:04d&#125;</span>.jpg&quot;</span></span><br><span class="line">        frame_path = os.path.join(video_frames_dir, frame_filename)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(frame_path):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;警告：帧图像 <span class="subst">&#123;frame_path&#125;</span> 不存在，跳过帧 <span class="subst">&#123;frame_number&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        </span><br><span class="line">        label_filename = <span class="string">f&quot;frame_<span class="subst">&#123;frame_number:04d&#125;</span>.txt&quot;</span></span><br><span class="line">        label_filepath = os.path.join(output_label_dir, label_filename)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(label_filepath, <span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> fw:</span><br><span class="line">            fw.write(<span class="string">f&quot;<span class="subst">&#123;yolo_class&#125;</span> <span class="subst">&#123;x_c_norm:<span class="number">.6</span>f&#125;</span> <span class="subst">&#123;y_c_norm:<span class="number">.6</span>f&#125;</span> <span class="subst">&#123;w_norm:<span class="number">.6</span>f&#125;</span> <span class="subst">&#123;h_norm:<span class="number">.6</span>f&#125;</span>\n&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;base_name&#125;</span>: 处理帧 <span class="subst">&#123;frame_number&#125;</span> 成功，生成 <span class="subst">&#123;label_filepath&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># --------------------------</span></span><br><span class="line"><span class="comment"># 4. 批量处理所有标签文件</span></span><br><span class="line"><span class="comment"># --------------------------</span></span><br><span class="line">all_files = glob.glob(os.path.join(annotations_dir, <span class="string">&quot;*.txt&quot;</span>))</span><br><span class="line">annotation_files = [f <span class="keyword">for</span> f <span class="keyword">in</span> all_files <span class="keyword">if</span> os.path.basename(f).lower().startswith(<span class="string">&quot;video&quot;</span>)]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;找到的标签文件：&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> f <span class="keyword">in</span> annotation_files:</span><br><span class="line">    <span class="built_in">print</span>(f)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> annotation_files:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;未找到标签文件，请检查路径和文件名格式。&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">for</span> ann_file <span class="keyword">in</span> annotation_files:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;开始处理 <span class="subst">&#123;ann_file&#125;</span> ...&quot;</span>)</span><br><span class="line">        process_annotation_file(ann_file)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;所有标签文件处理完成。&quot;</span>)</span><br></pre></td></tr></table></figure><hr><h3 id="详细解读"><a href="#详细解读" class="headerlink" title="详细解读"></a>详细解读</h3><ol><li><p><strong>路径配置部分</strong></p><ul><li><code>annotations_dir</code> 指标签文件所在目录。</li><li><code>frames_root_dir</code> 指向视频帧所在的根目录（每个视频的帧文件夹命名如 “video (N)_frames”）。</li><li><code>output_labels_root</code> 指向输出的转换后标签存放目录（每个视频输出到 “video (N)” 文件夹中）。</li></ul></li><li><p><strong>图像尺寸</strong></p><ul><li>根据 Le2i 数据集设置为 320×240。</li></ul></li><li><p><strong>转换函数 <code>convert_bbox_from_corners</code></strong></p><ul><li>新函数接受 x_min, y_min, x_max, y_max 四个值，并计算：<ul><li>框宽 &#x3D; x_max - x_min</li><li>框高 &#x3D; y_max - y_min</li><li>中心坐标 &#x3D; ((x_min + x_max) &#x2F; 2, (y_min + y_max) &#x2F; 2)</li></ul></li><li>然后归一化各值。</li></ul></li><li><p><strong>处理单个标签文件函数</strong></p><ul><li>根据文件名确定视频文件夹名称（如 “video (1)”），然后构造视频帧文件夹路径（<code>Frames\video (1)_frames</code>）和输出标签文件夹路径（<code>Labels\video (1)</code>）。</li><li>判断标签文件格式：如果第一行只包含一个数字，则跳过前两行，否则所有行都是记录。</li><li>逐行解析后，根据 x_min, y_min, x_max, y_max 计算 YOLO 格式的归一化坐标，写入对应帧图像的标签文件。</li></ul></li><li><p><strong>批量处理部分</strong></p><ul><li>使用 glob 递归查找所有以 “video” 开头的标签文件，然后逐个调用 <code>process_annotation_file</code> 处理。</li></ul></li><li><p>将以上代码保存为 <code>batch_convert.py</code>。</p></li><li><p>在命令行中运行：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python batch_convert.py</span><br></pre></td></tr></table></figure></li><li><p>脚本会输出处理情况，并在输出目录下生成转换后的 YOLO 格式标签文件。</p></li></ol><h3 id="2-Label-class-8-exceeds-nc-8"><a href="#2-Label-class-8-exceeds-nc-8" class="headerlink" title="2.Label class 8 exceeds nc&#x3D;8"></a>2.Label class 8 exceeds nc&#x3D;8</h3><p>直接使用原始标签（即 1 到 8），那么你需要调整 YOLO 数据配置文件，使得允许的类别范围覆盖这些数字。YOLOv5 要求标签数字必须在 0 到 nc-1 内。如果标签中出现 1 到 8，则需要将类别数量设置为 9，并在 <code>names</code> 中提供 9 个条目。</p><p>一种常见的做法是：</p><ul><li>把索引 0 作为占位符（因为你的数据中没有标签 0），然后索引 1 到 8 分别对应你的 8 个状态。</li></ul><p>例如，可以修改 <code>fall.yaml</code> 文件如下：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">train:</span> <span class="string">E:\IDMdownload\archive\Coffee_room_01\Coffee_room_01\Dataset\train\images</span></span><br><span class="line"><span class="attr">val:</span> <span class="string">E:\IDMdownload\archive\Coffee_room_01\Coffee_room_01\Dataset\val\images</span></span><br><span class="line"></span><br><span class="line"><span class="attr">names:</span></span><br><span class="line">  <span class="attr">0:</span> <span class="string">&quot;unused&quot;</span>      <span class="comment"># 占位符，不使用</span></span><br><span class="line">  <span class="attr">1:</span> <span class="string">&quot;state_1&quot;</span></span><br><span class="line">  <span class="attr">2:</span> <span class="string">&quot;state_7&quot;</span></span><br><span class="line">  <span class="attr">3:</span> <span class="string">&quot;state_8&quot;</span></span><br><span class="line">  <span class="attr">4:</span> <span class="string">&quot;state_2&quot;</span></span><br><span class="line">  <span class="attr">5:</span> <span class="string">&quot;state_3&quot;</span></span><br><span class="line">  <span class="attr">6:</span> <span class="string">&quot;state_4&quot;</span></span><br><span class="line">  <span class="attr">7:</span> <span class="string">&quot;state_5&quot;</span></span><br><span class="line">  <span class="attr">8:</span> <span class="string">&quot;state_6&quot;</span></span><br></pre></td></tr></table></figure><p>这样，训练时有效标签就是 1 到 8（共 8 个类别），并且标签数字均在 0 到 8 的范围内（虽然索引 0 不会出现在数据中）。这种方法避免了在预处理阶段做减一操作，同时满足 YOLOv5 的要求。</p><p>请注意：</p><ul><li>需要确保数据中的标签都是在 1 到 8 之间。</li><li>如果以后确认了每个状态的具体意义，也可以对 <code>names</code> 中的名称进行相应修改。</li></ul><p>这样修改后，训练时就不会报错“Label class 8 exceeds nc&#x3D;8”了，因为允许的类别范围是 0 到 8（即 9 个类别）。</p><h2 id="五、训练情况"><a href="#五、训练情况" class="headerlink" title="五、训练情况"></a>五、训练情况</h2><p><img src="https://raw.githubusercontent.com/Peter-JiY/pictures/main//2024/image-20250321093843078.png" alt="image-20250321093843078"></p><p>开始训练。</p><p><img src="https://raw.githubusercontent.com/Peter-JiY/pictures/main//2024/image-20250321094106666.png" alt="image-20250321094106666"></p><p>这段输出是 YOLOv5 在训练或验证阶段输出的性能指标和进度信息，我们来逐项解释：</p><hr><h3 id="1-上半部分的输出"><a href="#1-上半部分的输出" class="headerlink" title="1. 上半部分的输出"></a>1. 上半部分的输出</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">with torch.cuda.amp.autocast(amp):</span><br><span class="line">       0/49      0.96G     0.0494    0.01337    0.03241         12        320: 100%|██████████| 894/894 [01:52&lt;00:00,</span><br></pre></td></tr></table></figure><ul><li><strong><code>with torch.cuda.amp.autocast(amp):</code></strong><br> 这表示训练过程中启用了混合精度训练（Automatic Mixed Precision, AMP），利用 GPU 的半精度运算以加速训练并减少显存占用。</li><li>后面跟着的进度条和数值（例如 <code>0/49</code>、<code>0.96G</code> 等）通常表示当前 batch、当前进度、GPU 占用、损失值等信息。这部分内容根据具体版本和配置略有不同。</li></ul><hr><h3 id="2-后半部分的性能指标"><a href="#2-后半部分的性能指标" class="headerlink" title="2. 后半部分的性能指标"></a>2. 后半部分的性能指标</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Class     Images  Instances          P          R      mAP50   mAP50-95: 100%|██████████| 220/220 [00:</span><br><span class="line">  all       7012       2883      0.482      0.411      0.142     0.0958</span><br></pre></td></tr></table></figure><ul><li><strong>Class</strong>：这里显示的是统计类别，“all” 表示所有类别的综合指标。</li><li><strong>Images</strong>：7012 表示总共参与评估的图片数量。</li><li><strong>Instances</strong>：2883 表示所有图片中目标实例的总数（例如，所有检测到的物体总数）。</li><li>**P (Precision)**：0.482 表示精度为 48.2%。精度（Precision）反映了检测器预测的目标中有多少比例是真正的正确目标。</li><li>**R (Recall)**：0.411 表示召回率为 41.1%。召回率（Recall）反映了所有真实目标中被检测到的比例。</li><li><strong>mAP50</strong>：0.142 表示在 IoU 阈值为 0.50 时，平均精度均值（mean Average Precision, mAP）为 14.2%。这意味着当预测框与真实框的 IoU 大于等于 0.50 时，模型的整体检测精度大约是 14.2%。</li><li><strong>mAP50-95</strong>：0.0958 表示在多个 IoU 阈值（从 0.50 到 0.95，通常以 0.05 为步长取平均）下计算的 mAP 值为 9.58%。这是更严格的指标，反映了模型在更高重叠要求下的性能。</li></ul><hr><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li><p><strong>混合精度（AMP）</strong>：利用 <code>torch.cuda.amp.autocast</code> 实现混合精度训练，提高计算速度并降低显存占用。</p></li><li><p><strong>进度信息</strong>：训练或验证过程中显示了 GPU 占用、当前进度等。</p></li><li><p>性能指标</p><p>：</p><ul><li>精度（P）约 48.2%，召回率（R）约 41.1%，</li><li>mAP50（IoU≥0.50）约 14.2%，</li><li>mAP50-95（多个 IoU 阈值的平均）约 9.58%。</li></ul></li></ul><p>这是第一轮的训练结果。还挺慢，需要等到五十轮结束看看指标。</p><h2 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python detect.py --weights E:\Gitcage\yolov5\runs\train\exp5\weights\best.pt --<span class="built_in">source</span> E:\IDMdownload\archive\Office\Office\video (1).avi --img 320 --conf 0.25</span><br></pre></td></tr></table></figure><p>不是很理想，需要改进。</p><p><img src="https://raw.githubusercontent.com/Peter-JiY/pictures/main//2024/image-20250321155908873.png" alt="image-20250321155908873"></p><ul><li><h3 id="现尝试使用yolov5m模型进行训练，如果效果还不理想将采用yolov8的模型进行推理测试"><a href="#现尝试使用yolov5m模型进行训练，如果效果还不理想将采用yolov8的模型进行推理测试" class="headerlink" title="现尝试使用yolov5m模型进行训练，如果效果还不理想将采用yolov8的模型进行推理测试"></a>现尝试使用yolov5m模型进行训练，如果效果还不理想将采用yolov8的模型进行推理测试</h3></li></ul><p>同时为了更美观的展示训练结果，</p><p>修改相关代码，将旧的调用方式替换为新版推荐的方式。例如，在 train.py（或 common.py 中）找到类似下面的代码：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> torch.cuda.amp.autocast(amp):</span><br></pre></td></tr></table></figure><p>将其修改为：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> torch.amp.autocast(<span class="string">&#x27;cuda&#x27;</span>, enabled=amp):</span><br></pre></td></tr></table></figure><p>这样就能消除 FutureWarning。</p><hr><p>等我整理完结果数据再展示吧。</p><p>现阶段我觉得训练的结果只有40%上下的精度，我觉得不够，我只用了这个数据集的一个文件夹进行训练。现在我尝试将四个文件夹的数据合并然后进行训练看看效果。</p><p>由原来的一万多张图片一下扩充到三万多张，期待。</p><p>新的训练代码记录一下。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python train.py --img 320 --batch 16 --epochs 50 --data bigfall.yaml --weights yolov5s.pt</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Peter-JiY/pictures/main//2024/image-20250322233810973.png" alt="image-20250322233810973"></p><p>完了，出现数据集错误了，又白干了，又要重新查看数据集哪里错了</p><p>啊这。。。。<br>数据集出错也能训练的吗？</p><p><img src="https://raw.githubusercontent.com/Peter-JiY/pictures/main//2024/image-20250322233947086.png" alt="image-20250322233947086"></p><p>我先在这里记一下，100、106、121、72、73几个视频都存在数据处理问题。</p><p>简单筛查了一下发现是数据集没有配对上，等我把数据对其看看具体是哪里有问题。</p><hr><h2 id="yolov5训练结果"><a href="#yolov5训练结果" class="headerlink" title="yolov5训练结果"></a>yolov5训练结果</h2><p><img src="https://raw.githubusercontent.com/Peter-JiY/pictures/main//2024/image-20250323083553936.png" alt="image-20250323083553936"></p><p>结果非常好由原来的40直接上升到90+。马上再用yolov8测试看看效果如何。<br>yolov8的训练结果比v5的训练结果要好一点但是不是很明显。</p><hr><p>数据没贴上，等会训练的时候贴上。</p><h2 id="yolo8训练"><a href="#yolo8训练" class="headerlink" title="yolo8训练"></a>yolo8训练</h2><p>首先是训练代码</p><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">yolo detect train model=yolov8s.yaml data=bigfall.yaml epochs=<span class="number">50</span> imgsz=<span class="number">320</span> batch=<span class="number">16</span> name=bigfall_s_v2 pretrained=True device=<span class="number">0</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="💡-参数说明（因为你肯定忘了）："><a href="#💡-参数说明（因为你肯定忘了）：" class="headerlink" title="💡 参数说明（因为你肯定忘了）："></a>💡 参数说明（因为你肯定忘了）：</h3><ul><li><p><code>model=yolov8s.yaml</code>：使用哪个模型结构，可以换成 <code>yolov8s.yaml</code>、<code>yolov8m.yaml</code> 等等。</p></li><li><p><code>data=your_dataset.yaml</code>：数据配置文件，别给错路径，别写错名字。</p></li><li><p><code>epochs=100</code>：训练 100 轮，够你煎出炼丹炉底。</p></li><li><p><code>imgsz=640</code>：输入图像大小。</p></li><li><p><code>batch=16</code>：每批处理 16 张图，没显卡别乱写。</p></li><li><p><code>name=bigfall_s_v1</code>：结果保存目录 <code>runs/detect/bigfall_s_v1/</code>。</p></li><li><p><code>pretrained=True</code>：是否用 COCO 预训练模型打底，建议 True。</p></li><li><p><code>device=0</code>：用第一个 GPU。如果你根本没 GPU，那你只能 device&#x3D;cpu，然后关上电脑哭去。</p><hr></li></ul><p>保存一个cmd命令，怕等会忘记，由于自身笔记本的高度太低，使用手边的rv1106的板子加上sc3336的摄像头直接架高模拟摄像头查看推理效果如何。</p><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">yolo task=detect <span class="built_in">mode</span>=predict model=runs/detect/train/weights/best.pt data=bigfall.yaml source=&quot;rtsp://<span class="number">172</span>.<span class="number">32</span>.<span class="number">0</span>.<span class="number">93</span>/live/<span class="number">0</span>&quot; show=true conf=<span class="number">0</span>.<span class="number">25</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">yolo task=detect <span class="built_in">mode</span>=predict model=runs/detect/bigfall_s_v1/weights/best.pt   data=bigfall.yaml source=&quot;rtsp://<span class="number">172</span>.<span class="number">32</span>.<span class="number">0</span>.<span class="number">93</span>/live/<span class="number">0</span>&quot; show=true conf=<span class="number">0</span>.<span class="number">25</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> yolo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RV1106部署人脸识别insightface</title>
      <link href="/post/20241124185014.html"/>
      <url>/post/20241124185014.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="准备事项"><a href="#准备事项" class="headerlink" title="准备事项"></a>准备事项</h1><p><img src="https://raw.githubusercontent.com/Peter-JiY/pictures/main//2024/image-20241124192713726.png" alt="image-20241124192713726"></p><p><img src="C:/Users/14060/AppData/Roaming/Typora/typora-user-images/image-20241124193826281.png" alt="image-20241124193826281"></p><p><img src="C:/Users/14060/AppData/Roaming/Typora/typora-user-images/image-20241124201959542.png" alt="image-20241124201959542"></p><p><img src="C:/Users/14060/AppData/Roaming/Typora/typora-user-images/image-20241124202051342.png" alt="image-20241124202051342"></p><p><img src="C:/Users/14060/AppData/Roaming/Typora/typora-user-images/image-20241124202120239.png" alt="image-20241124202120239"></p><p><img src="C:/Users/14060/AppData/Roaming/Typora/typora-user-images/image-20241124194314975.png" alt="image-20241124194314975"></p><p>交叉编译，配置本地的GCC编译环境。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">arm-buildroot-linux-gnueabihf-gcc -o hello hello.c -static</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export PATH=~/buildroot/output/host/usr/bin:$PATH</span><br></pre></td></tr></table></figure><h1 id="部署模型"><a href="#部署模型" class="headerlink" title="部署模型"></a>部署模型</h1><h2 id="1-选择开源项目"><a href="#1-选择开源项目" class="headerlink" title="1.选择开源项目"></a>1.选择开源项目</h2><p><img src="C:/Users/14060/AppData/Roaming/Typora/typora-user-images/image-20241127105210004.png" alt="image-20241127105210004"></p><h2 id="2-模型转换"><a href="#2-模型转换" class="headerlink" title="2.模型转换"></a>2.模型转换</h2><h2 id="3-模型部署"><a href="#3-模型部署" class="headerlink" title="3.模型部署"></a>3.模型部署</h2><h2 id="4-摄像头集成与实时识别"><a href="#4-摄像头集成与实时识别" class="headerlink" title="4.摄像头集成与实时识别"></a>4.摄像头集成与实时识别</h2>]]></content>
      
      
      
        <tags>
            
            <tag> insightface </tag>
            
            <tag> RV1106 </tag>
            
            <tag> buildroot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>快速构建insightface的demo</title>
      <link href="/post/20241118190259.html"/>
      <url>/post/20241118190259.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近还报名了一个AI嵌入式的小项目，自己玩玩吧。和insightface的内容相关。</p><h1 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h1><hr><h3 id="步骤-1：环境准备"><a href="#步骤-1：环境准备" class="headerlink" title="步骤 1：环境准备"></a><strong>步骤 1：环境准备</strong></h3><ol><li><p><strong>安装必要的软件和工具：</strong></p><ul><li>确保系统安装了以下工具：<ul><li>Python (建议 3.8 以上)</li><li>CUDA (如使用 GPU 加速)</li><li>pip 或 conda 包管理工具</li></ul></li><li>如果没有 GPU，也可以使用 CPU，但速度会慢。</li></ul></li><li><p><strong>克隆 InsightFace 项目代码：</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/deepinsight/insightface.git</span><br><span class="line"><span class="built_in">cd</span> insightface</span><br></pre></td></tr></table></figure></li><li><p><strong>创建虚拟环境并安装依赖：</strong></p><ul><li><p>使用 <code>pip</code> 或 <code>conda</code> 安装依赖：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建虚拟环境并指定版本</span></span><br><span class="line">conda create -n insightface python=3.9</span><br><span class="line"><span class="comment"># 激活虚拟环境</span></span><br><span class="line">conda activate insightface</span><br><span class="line"><span class="comment"># 安装所需依赖</span></span><br><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></table></figure></li><li><p>安装 PyTorch（或 MXNet）：</p><p><img src="https://raw.githubusercontent.com/Peter-JiY/pictures/main//2024/image-20241118192953609.png" alt="image-20241118192953609">去官网查询，找到对应的版本，复制链接下载</p></li><li><pre><code>conda install pytorch torchvision torchaudio pytorch-cuda=11.8 -c pytorch -c nvidia<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">   </span><br><span class="line">4. **下载预训练模型：**</span><br><span class="line">   </span><br><span class="line">   - InsightFace 提供了人脸检测 (RetinaFace) 和识别 (ArcFace) 的预训练模型。</span><br><span class="line">   </span><br><span class="line">   - 下载模型：</span><br><span class="line">     - RetinaFace: https://github.com/deepinsight/insightface/tree/master/detection/retinaface</span><br><span class="line">     - ArcFace 模型库：https://github.com/deepinsight/insightface/tree/master/recognition</span><br><span class="line">     </span><br><span class="line">   - 确保模型文件存储在正确的路径，或自行调整路径。</span><br><span class="line">   </span><br><span class="line">     </span><br><span class="line">     </span><br><span class="line">     </span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">### **步骤 2：快速搭建 Demo**</span><br><span class="line"></span><br><span class="line">1. **Demo 脚本结构：**</span><br><span class="line">   - **功能**：加载一张图片，进行人脸检测，然后识别或提取人脸特征。</span><br><span class="line">   - 以下代码展示了一个简单的实现：</span><br><span class="line"></span><br><span class="line">   ```python</span><br><span class="line">   import cv2</span><br><span class="line">   import numpy as np</span><br><span class="line">   from insightface.app import FaceAnalysis</span><br><span class="line">   </span><br><span class="line">   # 1. 初始化人脸分析模型</span><br><span class="line">   def init_insightface():</span><br><span class="line">       app = FaceAnalysis(name=&quot;buffalo_l&quot;)  # 使用 InsightFace 提供的预训练模型</span><br><span class="line">       app.prepare(ctx_id=0, det_size=(640, 640))  # ctx_id=0 表示使用 GPU，-1 表示 CPU</span><br><span class="line">       return app</span><br><span class="line">   </span><br><span class="line">   # 2. 人脸检测与特征提取</span><br><span class="line">   def process_image(app, img_path):</span><br><span class="line">       # 加载图片</span><br><span class="line">       img = cv2.imread(img_path)</span><br><span class="line">       if img is None:</span><br><span class="line">           print(&quot;无法加载图片，请检查路径&quot;)</span><br><span class="line">           return</span><br><span class="line">   </span><br><span class="line">       # 检测人脸</span><br><span class="line">       faces = app.get(img)</span><br><span class="line">       if not faces:</span><br><span class="line">           print(&quot;未检测到人脸&quot;)</span><br><span class="line">           return</span><br><span class="line">   </span><br><span class="line">       # 绘制检测结果</span><br><span class="line">       for face in faces:</span><br><span class="line">           box = face.bbox.astype(int)</span><br><span class="line">           cv2.rectangle(img, (box[0], box[1]), (box[2], box[3]), (255, 0, 0), 2)</span><br><span class="line">           print(&quot;人脸特征向量：&quot;, face.normed_embedding)  # 打印特征向量</span><br><span class="line">   </span><br><span class="line">       # 显示结果</span><br><span class="line">       cv2.imshow(&quot;Detected Faces&quot;, img)</span><br><span class="line">       cv2.waitKey(0)</span><br><span class="line">       cv2.destroyAllWindows()</span><br><span class="line">   </span><br><span class="line">   if __name__ == &quot;__main__&quot;:</span><br><span class="line">       # 初始化</span><br><span class="line">       app = init_insightface()</span><br><span class="line">   </span><br><span class="line">       # 输入图片路径</span><br><span class="line">       img_path = &quot;your_image_path.jpg&quot;  # 替换为你的图片路径</span><br><span class="line">       process_image(app, img_path)</span><br></pre></td></tr></table></figure></code></pre></li></ul></li><li><p><strong>代码说明</strong>：</p><ul><li><code>FaceAnalysis</code> 是 InsightFace 的核心模块，支持人脸检测和特征提取。</li><li><code>ctx_id</code> 设置为 <code>0</code> 时，使用 GPU 加速；设置为 <code>-1</code> 时，使用 CPU。</li><li>检测到的人脸可以通过 <code>bbox</code> 提取位置，<code>normed_embedding</code> 提取特征向量。</li></ul></li></ol><hr><h3 id="步骤-3：运行-Demo"><a href="#步骤-3：运行-Demo" class="headerlink" title="步骤 3：运行 Demo"></a><strong>步骤 3：运行 Demo</strong></h3><ol><li>确保图片路径正确，例如 <code>img_path = &quot;test.jpg&quot;</code>。</li><li>运行脚本：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python demo.py</span><br></pre></td></tr></table></figure></li><li>成功运行后，程序将显示检测到的人脸，并在终端输出人脸的特征向量。</li></ol><hr><h3 id="步骤-4：扩展功能"><a href="#步骤-4：扩展功能" class="headerlink" title="步骤 4：扩展功能"></a><strong>步骤 4：扩展功能</strong></h3><p>在 Demo 基础上，可以尝试添加更多功能：</p><ol><li><p><strong>实时摄像头检测：</strong></p><ul><li>替换图片加载部分，改为调用摄像头：<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cap = cv2.VideoCapture(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    ret, frame = cap.read()</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> ret:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    faces = app.get(frame)</span><br><span class="line">    <span class="comment"># ...绘制检测结果</span></span><br><span class="line">    cv2.imshow(<span class="string">&quot;Real-Time Detection&quot;</span>, frame)</span><br><span class="line">    <span class="keyword">if</span> cv2.waitKey(<span class="number">1</span>) &amp; <span class="number">0xFF</span> == <span class="built_in">ord</span>(<span class="string">&#x27;q&#x27;</span>):</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">cap.release()</span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>人脸匹配（比对）：</strong></p><ul><li>对两张图片提取特征向量，计算余弦相似度判断是否为同一人：<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> scipy.spatial.distance <span class="keyword">import</span> cosine</span><br><span class="line"></span><br><span class="line">embedding1 = face1.normed_embedding</span><br><span class="line">embedding2 = face2.normed_embedding</span><br><span class="line">similarity = <span class="number">1</span> - cosine(embedding1, embedding2)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;相似度：<span class="subst">&#123;similarity&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>批量处理：</strong></p><ul><li>加载文件夹中的多张图片，循环处理。</li></ul></li><li><p><strong>模型优化：</strong></p><ul><li>根据实际需求，使用量化模型或裁剪模型以提升性能。</li></ul></li></ol><hr><h3 id="步骤-5：参考文档与资源"><a href="#步骤-5：参考文档与资源" class="headerlink" title="步骤 5：参考文档与资源"></a><strong>步骤 5：参考文档与资源</strong></h3><ol><li><a href="https://github.com/deepinsight/insightface">InsightFace GitHub 仓库</a></li><li><a href="https://arxiv.org/abs/1801.07698">ArcFace 论文</a></li><li><a href="https://arxiv.org/abs/1905.00641">RetinaFace 论文</a></li></ol><p>​</p>]]></content>
      
      
      
        <tags>
            
            <tag> insightface </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo搭建一个音乐馆</title>
      <link href="/post/20241118152148.html"/>
      <url>/post/20241118152148.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>看到别人的博客有个专门的音乐网页我也心动了</p><img src="https://raw.githubusercontent.com/Peter-JiY/pictures/main//image-20241118153254413.png" alt="image-20241118153254413"  /><h1 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h1><p>先初始化一个页面，专门来做音乐馆的页面。</p><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">hexo new page music</span><br></pre></td></tr></table></figure><p>现在这个页面什么还没有，我们要整上一个工具，也就是一个播放的相关的插件，因为播放需要js支持。</p><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">npm install --save hexo-tag-aplayer</span><br></pre></td></tr></table></figure><p><a href="https://github.com/MoePlayer/hexo-tag-aplayer/blob/master/docs/README-zh_cn.md"><strong>hexo-tag-aplayer</strong></a> 我附上链接了，可以去看看作者的说明文档</p><p>新版本的支持MetingJS。</p><p>找到hexo根目录下的_config.yaml添加</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">aplayer:</span></span><br><span class="line">  <span class="attr">meting:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>在_config.butterfly.yaml里面加上<img src="https://raw.githubusercontent.com/Peter-JiY/pictures/main//image-20241118162334503.png" alt="image-20241118162334503"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">音乐馆: /music/ || fa fa-music</span><br></pre></td></tr></table></figure><p>同时在里面找到<img src="https://raw.githubusercontent.com/Peter-JiY/pictures/main//image-20241118162532794.png" alt="image-20241118162532794"></p><p>将其改成</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Inject the css and script (aplayer/meting)</span></span><br><span class="line"><span class="attr">aplayerInject:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">per_page:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>最后一步，在新建的music文档里面填写</p><p><img src="https://raw.githubusercontent.com/Peter-JiY/pictures/main//image-20241118162749800.png" alt="image-20241118162749800"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% meting &quot;173901981&quot; &quot;netease&quot; &quot;playlist&quot; &quot;autoplay&quot; &quot;mutex:true&quot; &quot;listmaxheight:1140px&quot; &quot;preload:auto&quot; &quot;theme:#ad7a86&quot;%&#125;</span><br></pre></td></tr></table></figure><p>和下面的表格一一对应的，对着找到更改就行，改成自己想要的样式。</p><p>有关  <code>&#123;% meting %&#125;</code>  的选项列表如下:</p><table><thead><tr><th>选项</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>id</td><td><strong>必须值</strong></td><td>歌曲 id &#x2F; 播放列表 id &#x2F; 相册 id &#x2F; 搜索关键字</td></tr><tr><td>server</td><td><strong>必须值</strong></td><td>音乐平台: <code>netease</code>, <code>tencent</code>, <code>kugou</code>, <code>xiami</code>, <code>baidu</code></td></tr><tr><td>type</td><td><strong>必须值</strong></td><td><code>song</code>, <code>playlist</code>, <code>album</code>, <code>search</code>, <code>artist</code></td></tr><tr><td>fixed</td><td><code>false</code></td><td>开启固定模式</td></tr><tr><td>mini</td><td><code>false</code></td><td>开启迷你模式</td></tr><tr><td>loop</td><td><code>all</code></td><td>列表循环模式：<code>all</code>, <code>one</code>,<code>none</code></td></tr><tr><td>order</td><td><code>list</code></td><td>列表播放模式： <code>list</code>, <code>random</code></td></tr><tr><td>volume</td><td>0.7</td><td>播放器音量</td></tr><tr><td>lrctype</td><td>0</td><td>歌词格式类型</td></tr><tr><td>listfolded</td><td><code>false</code></td><td>指定音乐播放列表是否折叠</td></tr><tr><td>storagename</td><td><code>metingjs</code></td><td>LocalStorage 中存储播放器设定的键名</td></tr><tr><td>autoplay</td><td><code>true</code></td><td>自动播放，移动端浏览器暂时不支持此功能</td></tr><tr><td>mutex</td><td><code>true</code></td><td>该选项开启时，如果同页面有其他 aplayer 播放，该播放器会暂停</td></tr><tr><td>listmaxheight</td><td><code>340px</code></td><td>播放列表的最大长度</td></tr><tr><td>preload</td><td><code>auto</code></td><td>音乐文件预载入模式，可选项： <code>none</code>, <code>metadata</code>, <code>auto</code></td></tr><tr><td>theme</td><td><code>#ad7a86</code></td><td>播放器风格色彩设置</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> butterfly </tag>
            
            <tag> Meting </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>katex数学公式的写法</title>
      <link href="/post/20241117210526.html"/>
      <url>/post/20241117210526.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="KaTeX-示例"><a href="#KaTeX-示例" class="headerlink" title="KaTeX 示例"></a>KaTeX 示例</h1><p>KaTeX 是一个快速、可靠的 LaTeX 公式渲染引擎，它可以让你在网页上以漂亮的方式展示数学公式。以下是一些 KaTeX 的常见用法示例。</p><h2 id="行内公式"><a href="#行内公式" class="headerlink" title="行内公式"></a>行内公式</h2><p>你可以使用 <code>$...$</code> 或 <code>\(...\) </code> 来插入行内公式。例如：</p><ul><li>这是一个行内公式的示例：( a^2 + b^2 &#x3D; c^2 )。</li><li>或者：E&#x3D;mc2E &#x3D; mc^2E&#x3D;mc2。</li></ul><p><strong>显示效果：</strong></p><ul><li>a2+b2&#x3D;c2a^2 + b^2 &#x3D; c^2 a2+b2&#x3D;c2</li><li>E&#x3D;mc2 E &#x3D; mc^2 E&#x3D;mc2</li></ul><h2 id="块级公式"><a href="#块级公式" class="headerlink" title="块级公式"></a>块级公式</h2><p>对于块级公式，使用 <code>$$...$$</code> 或 <code>\[...\]</code>。例如：</p><h3 id="例子-1"><a href="#例子-1" class="headerlink" title="例子 1"></a>例子 1</h3><p>这是一个块级公式的示例：</p><figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\[</span></span><br><span class="line"><span class="keyword">\int</span><span class="built_in">_</span>&#123;a&#125;<span class="built_in">^</span>&#123;b&#125; x<span class="built_in">^</span>2 <span class="keyword">\,</span> dx = <span class="keyword">\left</span>. <span class="keyword">\frac</span>&#123;x<span class="built_in">^</span>3&#125;&#123;3&#125; <span class="keyword">\right</span>|<span class="built_in">_</span>&#123;a&#125;<span class="built_in">^</span>&#123;b&#125;</span><br><span class="line"><span class="keyword">\]</span></span><br></pre></td></tr></table></figure><p><strong>显示效果：</strong><br>$$<br>\int_{a}^{b} x^2 , dx &#x3D; \left. \frac{x^3}{3} \right|_{a}^{b}<br>$$</p><h3 id="例子-2"><a href="#例子-2" class="headerlink" title="例子 2"></a>例子 2</h3><p>另一个块级公式的示例：</p><figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\[</span></span><br><span class="line"><span class="keyword">\frac</span>&#123;1&#125;&#123;<span class="keyword">\sqrt</span>&#123;2<span class="keyword">\pi</span> <span class="keyword">\sigma</span><span class="built_in">^</span>2&#125;&#125; <span class="keyword">\exp</span><span class="keyword">\left</span>(-<span class="keyword">\frac</span>&#123;(x - <span class="keyword">\mu</span>)<span class="built_in">^</span>2&#125;&#123;2<span class="keyword">\sigma</span><span class="built_in">^</span>2&#125;<span class="keyword">\right</span>)</span><br><span class="line"><span class="keyword">\]</span></span><br></pre></td></tr></table></figure><p><strong>显示效果：</strong></p><p>$$<br>\frac{1}{\sqrt{2\pi \sigma^2}} \exp\left(-\frac{(x - \mu)^2}{2\sigma^2}\right)<br>$$</p><h2 id="常见公式示例"><a href="#常见公式示例" class="headerlink" title="常见公式示例"></a>常见公式示例</h2><h3 id="1-二次方程"><a href="#1-二次方程" class="headerlink" title="1. 二次方程"></a>1. 二次方程</h3><p>二次方程的一般形式是：</p><figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br><span class="line">ax<span class="built_in">^</span>2 + bx + c = 0</span><br><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br></pre></td></tr></table></figure><p><strong>显示效果：</strong></p><p>$$<br>ax^2 + bx + c &#x3D; 0<br>$$</p><p>它的解可以通过求解以下公式得到：</p><figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br><span class="line">x = <span class="keyword">\frac</span>&#123;-b <span class="keyword">\pm</span> <span class="keyword">\sqrt</span>&#123;b<span class="built_in">^</span>2 - 4ac&#125;&#125;&#123;2a&#125;</span><br><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br></pre></td></tr></table></figure><p><strong>显示效果：</strong></p><p>$$<br>x &#x3D; \frac{-b \pm \sqrt{b^2 - 4ac}}{2a}<br>$$</p><h3 id="2-复数"><a href="#2-复数" class="headerlink" title="2. 复数"></a>2. 复数</h3><p>一个复数的表示形式为：</p><figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br><span class="line">z = a + bi</span><br><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br></pre></td></tr></table></figure><p><strong>显示效果：</strong></p><p>$$<br>z &#x3D; a + bi<br>$$</p><p>其中，(a) 是实部，(b) 是虚部，(i) 是虚数单位，满足 (i^2 &#x3D; -1)。</p><h3 id="3-级数"><a href="#3-级数" class="headerlink" title="3. 级数"></a>3. 级数</h3><p>一个常见的级数是几何级数：</p><figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br><span class="line">S = <span class="keyword">\frac</span>&#123;a&#125;&#123;1 - r&#125;</span><br><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br></pre></td></tr></table></figure><p><strong>显示效果：</strong></p><p>$$<br>S &#x3D; \frac{a}{1 - r}<br>$$</p><p>其中，(a) 是首项，(r) 是公比。</p><h3 id="4-矩阵"><a href="#4-矩阵" class="headerlink" title="4. 矩阵"></a>4. 矩阵</h3><p>一个 $2 \times 2$ 矩阵的示例：</p><figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br><span class="line"><span class="keyword">\begin</span>&#123;bmatrix&#125;</span><br><span class="line">a <span class="built_in">&amp;</span> b <span class="keyword">\\</span></span><br><span class="line">c <span class="built_in">&amp;</span> d</span><br><span class="line"><span class="keyword">\end</span>&#123;bmatrix&#125;</span><br><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br></pre></td></tr></table></figure><p><strong>显示效果：</strong></p><p>$$<br>\begin{bmatrix}<br>a &amp; b \<br>c &amp; d<br>\end{bmatrix}<br>$$</p><h2 id="使用宏"><a href="#使用宏" class="headerlink" title="使用宏"></a>使用宏</h2><p>KaTeX 支持宏，你可以定义自己的数学符号。例如：</p><figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br><span class="line"><span class="keyword">\text</span>&#123;面积&#125; = <span class="keyword">\pi</span> r<span class="built_in">^</span>2</span><br><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br></pre></td></tr></table></figure><p><strong>显示效果：</strong></p><p>$$<br>\text{面积} &#x3D; \pi r^2<br>$$</p><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ul><li>确保你的页面已经正确加载了 KaTeX 的 CSS 和 JavaScript 文件。</li><li>在文档中使用公式时，确保正确使用 <code>$$</code> 和 <code>$</code> 符号，以避免解析错误。</li></ul><hr><h1 id="MathJax-示例"><a href="#MathJax-示例" class="headerlink" title="MathJax 示例"></a>MathJax 示例</h1><p>MathJax 是一个强大的 JavaScript 库，用于在网页上渲染 LaTeX 和 MathML 数学公式。以下是一些 MathJax 的常见用法示例。</p><h2 id="行内公式-1"><a href="#行内公式-1" class="headerlink" title="行内公式"></a>行内公式</h2><p>你可以使用 <code>$...$</code> 或 <code>\( ... \)</code> 来插入行内公式。例如：</p><ul><li>这是一个行内公式的示例：( a^2 + b^2 &#x3D; c^2 )。</li><li>或者：$E &#x3D; mc^2$。</li></ul><p><strong>显示效果：</strong></p><ul><li>$a^2 + b^2 &#x3D; c^2 $</li><li>$ E &#x3D; mc^2 $</li></ul><h2 id="块级公式-1"><a href="#块级公式-1" class="headerlink" title="块级公式"></a>块级公式</h2><p>对于块级公式，使用 <code>$$...$$</code> 或 <code>\[ ... \]</code>。例如：</p><h3 id="例子-1-1"><a href="#例子-1-1" class="headerlink" title="例子 1"></a>例子 1</h3><p>这是一个块级公式的示例：</p><figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\[</span></span><br><span class="line"><span class="keyword">\int</span><span class="built_in">_</span>&#123;a&#125;<span class="built_in">^</span>&#123;b&#125; x<span class="built_in">^</span>2 <span class="keyword">\,</span> dx = <span class="keyword">\left</span>. <span class="keyword">\frac</span>&#123;x<span class="built_in">^</span>3&#125;&#123;3&#125; <span class="keyword">\right</span>|<span class="built_in">_</span>&#123;a&#125;<span class="built_in">^</span>&#123;b&#125;</span><br><span class="line"><span class="keyword">\]</span></span><br></pre></td></tr></table></figure><p><strong>显示效果：</strong></p><p>$$<br>\int_{a}^{b} x^2 , dx &#x3D; \left. \frac{x^3}{3} \right|_{a}^{b}<br>$$</p><h3 id="例子-2-1"><a href="#例子-2-1" class="headerlink" title="例子 2"></a>例子 2</h3><p>另一个块级公式的示例：</p><figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br><span class="line"><span class="keyword">\frac</span>&#123;1&#125;&#123;<span class="keyword">\sqrt</span>&#123;2<span class="keyword">\pi</span> <span class="keyword">\sigma</span><span class="built_in">^</span>2&#125;&#125; <span class="keyword">\exp</span><span class="keyword">\left</span>(-<span class="keyword">\frac</span>&#123;(x - <span class="keyword">\mu</span>)<span class="built_in">^</span>2&#125;&#123;2<span class="keyword">\sigma</span><span class="built_in">^</span>2&#125;<span class="keyword">\right</span>)</span><br><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br></pre></td></tr></table></figure><p><strong>显示效果：</strong></p><p>$$<br>\frac{1}{\sqrt{2\pi \sigma^2}} \exp\left(-\frac{(x - \mu)^2}{2\sigma^2}\right)<br>$$</p><h2 id="常见公式示例-1"><a href="#常见公式示例-1" class="headerlink" title="常见公式示例"></a>常见公式示例</h2><h3 id="1-二次方程-1"><a href="#1-二次方程-1" class="headerlink" title="1. 二次方程"></a>1. 二次方程</h3><p>二次方程的一般形式是：</p><figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br><span class="line">ax<span class="built_in">^</span>2 + bx + c = 0</span><br><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br></pre></td></tr></table></figure><p><strong>显示效果：</strong></p><p>$$<br>ax^2 + bx + c &#x3D; 0<br>$$</p><p>它的解可以通过求解以下公式得到：</p><figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br><span class="line">x = <span class="keyword">\frac</span>&#123;-b <span class="keyword">\pm</span> <span class="keyword">\sqrt</span>&#123;b<span class="built_in">^</span>2 - 4ac&#125;&#125;&#123;2a&#125;</span><br><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br></pre></td></tr></table></figure><p><strong>显示效果：</strong></p><p>$$<br>x &#x3D; \frac{-b \pm \sqrt{b^2 - 4ac}}{2a}<br>$$</p><h3 id="2-复数-1"><a href="#2-复数-1" class="headerlink" title="2. 复数"></a>2. 复数</h3><p>一个复数的表示形式为：</p><figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br><span class="line">z = a + bi</span><br><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br></pre></td></tr></table></figure><p><strong>显示效果：</strong></p><p>$$<br>z &#x3D; a + bi<br>$$</p><p>其中，(a) 是实部，(b) 是虚部，(i) 是虚数单位，满足 (i^2 &#x3D; -1)。</p><h3 id="3-级数-1"><a href="#3-级数-1" class="headerlink" title="3. 级数"></a>3. 级数</h3><p>一个常见的级数是几何级数：</p><figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">S = <span class="keyword">\frac</span>&#123;a&#125;&#123;1 - r&#125;</span><br></pre></td></tr></table></figure><p><strong>显示效果：</strong></p><p>$$<br>S &#x3D; \frac{a}{1 - r}<br>$$</p><p>其中，(a) 是首项，(r) 是公比。</p><h3 id="4-矩阵-1"><a href="#4-矩阵-1" class="headerlink" title="4. 矩阵"></a>4. 矩阵</h3><p>一个 $2 \times 2$ 矩阵的示例：</p><figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br><span class="line"><span class="keyword">\begin</span>&#123;bmatrix&#125;</span><br><span class="line">a <span class="built_in">&amp;</span> b <span class="keyword">\\</span></span><br><span class="line">c <span class="built_in">&amp;</span> d</span><br><span class="line"><span class="keyword">\end</span>&#123;bmatrix&#125;</span><br><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br></pre></td></tr></table></figure><p><strong>显示效果：</strong></p><p>$$<br>\begin{bmatrix}<br>a &amp; b \<br>c &amp; d<br>\end{bmatrix}<br>$$</p><h2 id="使用宏-1"><a href="#使用宏-1" class="headerlink" title="使用宏"></a>使用宏</h2><p>MathJax 支持宏，你可以定义自己的数学符号。例如：</p><figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br><span class="line"><span class="keyword">\text</span>&#123;面积&#125; = <span class="keyword">\pi</span> r<span class="built_in">^</span>2</span><br><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br></pre></td></tr></table></figure><p><strong>显示效果：</strong></p><p>$$<br>\text{面积} &#x3D; \pi r^2<br>$$</p><h2 id="注意事项-1"><a href="#注意事项-1" class="headerlink" title="注意事项"></a>注意事项</h2><ul><li>确保你的页面已经正确加载了 MathJax 的 JavaScript 文件。</li><li>在文档中使用公式时，确保正确使用 <code>$$</code> 和 <code>$</code> 符号，以避免解析错误。</li></ul>]]></content>
      
      
      <categories>
          
          <category> typora </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Katex </tag>
            
            <tag> typora </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ardunio rp2024 connect</title>
      <link href="/post/20241115162913.html"/>
      <url>/post/20241115162913.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近参加了一个followme的活动，活动的任务是ardunio rp2024 connect的板子，主要完成三个任务：</p><ol><li><p>搭建环境并开启第一步Blink三色LED &#x2F; 串口打印Hello DigiKey &amp; EEWorld！；</p></li><li><p>学习IMU基础知识，调试IMU传感器，通过串口打印六轴原始数据；</p></li><li><p>学习PDM麦克风技术知识，调试PDM麦克风，通过串口打印收音数据和音频波形。</p></li></ol><p><img src="https://raw.githubusercontent.com/Peter-JiY/pictures/main//image-20241115163958320.png" alt="image-20241115163958320"></p><p>纯新手，朋友介绍过来玩的硬件。啥也不会，一边学一边玩吧。</p><p>干啥第一件事肯定就是搭环境。</p><p>先去ardunio的<a href="https://www.arduino.cc/en/software">官网</a>，找安装包，安装ardunio的ide。</p><p><img src="https://raw.githubusercontent.com/Peter-JiY/pictures/main//2024/image-20241119164041020.png" alt="image-20241119164041020"></p><p>现在板子到日本了，估计过两天就到了。</p><img src="https://raw.githubusercontent.com/Peter-JiY/pictures/main//image-20241115170520745.png" alt="image-20241115170520745" style="zoom:50%;" /><hr><p>今天终于到了。开箱！！！</p><img src="https://raw.githubusercontent.com/Peter-JiY/pictures/main//2024/IMG_7019.JPG" alt="IMG_7019" style="zoom: 25%;" /><img src="https://raw.githubusercontent.com/Peter-JiY/pictures/main//2024/IMG_7021.JPG" alt="IMG_7020" style="zoom: 25%;" /><img src="https://raw.githubusercontent.com/Peter-JiY/pictures/main//2024/IMG_7022.JPG" alt="IMG_7022" style="zoom:25%;" /><p>由于手头没有mirco的线，先用这个转换头看看。</p><hr><h1 id="尝试"><a href="#尝试" class="headerlink" title="尝试"></a>尝试</h1><h2 id="1-配置开发环境"><a href="#1-配置开发环境" class="headerlink" title="1.配置开发环境"></a>1.配置开发环境</h2><ul><li><p><input checked="" disabled="" type="checkbox"> 安装ardunio2.3.3 IDE</p></li><li><p><input checked="" disabled="" type="checkbox"> 安装板包</p><p>搜索开发板的名字 <strong>arduino nano rp2040 connect</strong></p></li></ul><p><img src="https://raw.githubusercontent.com/Peter-JiY/pictures/main//2024/image-20241119170555726.png" alt="image-20241119170555726"></p><h2 id="2-点灯"><a href="#2-点灯" class="headerlink" title="2.点灯"></a>2.点灯</h2><p><img src="https://raw.githubusercontent.com/Peter-JiY/pictures/main//2024/image-20241119171504358.png" alt="image-20241119171504358"></p><p>在上述的情况下已经完成安装的操作，我们的板子在连接的时候就一直闪烁。表现为一个红灯间接闪烁，一个灯变色间接闪烁，一个绿灯常亮。</p><p><img src="https://raw.githubusercontent.com/Peter-JiY/pictures/main//2024/IMG_7024.JPG" alt="IMG_7024"></p><hr><p>下面开始点灯的操作</p><img src="https://raw.githubusercontent.com/Peter-JiY/pictures/main//2024/image-20241119172019132.png" alt="image-20241119172019132" style="zoom:50%;" /><p>选择Blink,然后点击上传按钮</p><img src="https://raw.githubusercontent.com/Peter-JiY/pictures/main//2024/image-20241119172347916.png" alt="image-20241119172347916" style="zoom:50%;" /><p>我们可以看到，板子的灯也变了</p><img src="https://raw.githubusercontent.com/Peter-JiY/pictures/main//2024/IMG_7027.JPG" alt="IMG_7027" style="zoom:50%;" /><h2 id="恭喜你完成了点灯的操作！！！😘"><a href="#恭喜你完成了点灯的操作！！！😘" class="headerlink" title="恭喜你完成了点灯的操作！！！😘"></a>恭喜你完成了点灯的操作！！！😘</h2><h1 id="任务一：搭建环境并开启第一步Blink三色LED-串口打印Hello-DigiKey-EEWorld！；"><a href="#任务一：搭建环境并开启第一步Blink三色LED-串口打印Hello-DigiKey-EEWorld！；" class="headerlink" title="任务一：搭建环境并开启第一步Blink三色LED &#x2F; 串口打印Hello DigiKey &amp; EEWorld！；"></a>任务一：搭建环境并开启第一步Blink三色LED &#x2F; 串口打印Hello DigiKey &amp; EEWorld！；</h1><h2 id="1-查看官方的引脚图"><a href="#1-查看官方的引脚图" class="headerlink" title="1.查看官方的引脚图"></a>1.查看官方的引脚图</h2><p><img src="https://raw.githubusercontent.com/Peter-JiY/pictures/main//2024/image-20241119192609010.png" alt="image-20241119192609010"></p><p>可以看到我们刚才点灯调用的是LED_BUILTIN的引脚。找到我们本次任务的采用的RGBLED的引脚。</p><p><img src="https://raw.githubusercontent.com/Peter-JiY/pictures/main//2024/image-20241119192825570.png" alt="image-20241119192825570"></p><hr><p>因为之前没搞过硬件不太懂，想当然的认为这里的引脚是RGB LED</p><p><img src="https://raw.githubusercontent.com/Peter-JiY/pictures/main//2024/image-20241119193050448.png" alt="image-20241119193050448"></p><p>一片红灯，我得试试是不是刚才引脚图里面的LEDR&#x2F;LEDG&#x2F;LEDB。</p><p><img src="https://raw.githubusercontent.com/Peter-JiY/pictures/main//2024/image-20241119193251279.png" alt="image-20241119193251279"></p><p>得偿所愿，也是一排红灯。但是有提示，提示这个pin脚在WIFININA的库里面才能使用。我又去<a href="https://docs.arduino.cc/hardware/nano-rp2040-connect/#features">官网</a>找到开发文档，相见恨晚！！</p><hr><p><img src="https://raw.githubusercontent.com/Peter-JiY/pictures/main//2024/image-20241119193748581.png" alt="image-20241119193748581"></p><p>内置的LED。得调库才行。早点发现开发文档就好了。</p><h2 id="2-安装WIFININA库"><a href="#2-安装WIFININA库" class="headerlink" title="2.安装WIFININA库"></a>2.安装WIFININA库</h2><p>好了开始装库WIFININA。</p><p><img src="https://raw.githubusercontent.com/Peter-JiY/pictures/main//2024/image-20241119194537477.png" alt="image-20241119194537477"></p><h2 id="3-成功点亮"><a href="#3-成功点亮" class="headerlink" title="3.成功点亮"></a>3.成功点亮</h2><p><img src="https://raw.githubusercontent.com/Peter-JiY/pictures/main//2024/image-20241119195814100.png" alt="image-20241119195814100"></p><p>运行成功。代码如下：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;WiFiNINA.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">setup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// put your setup code here, to run once:</span></span><br><span class="line">  Serial.<span class="built_in">begin</span>(<span class="number">115200</span>);</span><br><span class="line">  <span class="built_in">pinMode</span>(LEDR,OUTPUT);</span><br><span class="line">  <span class="built_in">pinMode</span>(LEDG,OUTPUT);</span><br><span class="line">  <span class="built_in">pinMode</span>(LEDB,OUTPUT);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">loop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// put your main code here, to run repeatedly:</span></span><br><span class="line">  <span class="comment">//串口打印</span></span><br><span class="line">  Serial.<span class="built_in">println</span>(<span class="string">&quot;Hello DigiKey &amp; EEWorld！&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//亮红灯</span></span><br><span class="line">  <span class="built_in">digitalWrite</span>(LEDR, HIGH);  </span><br><span class="line">  <span class="built_in">delay</span>(<span class="number">1000</span>);                      </span><br><span class="line">  <span class="built_in">digitalWrite</span>(LEDR, LOW);   </span><br><span class="line">  <span class="built_in">delay</span>(<span class="number">1000</span>);                     </span><br><span class="line"></span><br><span class="line">  <span class="comment">//亮绿灯</span></span><br><span class="line">  <span class="built_in">digitalWrite</span>(LEDG, HIGH);  </span><br><span class="line">  <span class="built_in">delay</span>(<span class="number">1000</span>);                     </span><br><span class="line">  <span class="built_in">digitalWrite</span>(LEDG, LOW);   </span><br><span class="line">  <span class="built_in">delay</span>(<span class="number">1000</span>);                  </span><br><span class="line"></span><br><span class="line">  <span class="comment">//亮蓝灯</span></span><br><span class="line">  <span class="built_in">digitalWrite</span>(LEDB, HIGH);  </span><br><span class="line">  <span class="built_in">delay</span>(<span class="number">1000</span>);                     </span><br><span class="line">  <span class="built_in">digitalWrite</span>(LEDB, LOW);   </span><br><span class="line">  <span class="built_in">delay</span>(<span class="number">1000</span>);   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Peter-JiY/pictures/main//2024/IMG_7028.JPG" alt="IMG_7028"></p><p><img src="https://raw.githubusercontent.com/Peter-JiY/pictures/main//2024/IMG_7029.JPG" alt="IMG_7029"></p><p><img src="https://raw.githubusercontent.com/Peter-JiY/pictures/main//2024/IMG_7030.JPG" alt="IMG_7030"></p><h2 id="任务一完成"><a href="#任务一完成" class="headerlink" title="任务一完成"></a>任务一完成</h2><h1 id="任务二：学习IMU基础知识，调试IMU传感器，通过串口打印六轴原始数据"><a href="#任务二：学习IMU基础知识，调试IMU传感器，通过串口打印六轴原始数据" class="headerlink" title="任务二：学习IMU基础知识，调试IMU传感器，通过串口打印六轴原始数据"></a>任务二：学习IMU基础知识，调试IMU传感器，通过串口打印六轴原始数据</h1><p>要学习 IMU (惯性测量单元) 的基础知识，并通过 Arduino IDE 调试 IMU 传感器以通过串口打印六轴原始数据，可以按照以下步骤操作：</p><hr><h2 id="1-什么是-IMU？"><a href="#1-什么是-IMU？" class="headerlink" title="1. 什么是 IMU？"></a><strong>1. 什么是 IMU？</strong></h2><p>IMU 是一种集成传感器模块，通常包含以下传感器：</p><ul><li>**加速度计 (Accelerometer)**：用于测量线性加速度 (单位：g)。</li><li>**陀螺仪 (Gyroscope)**：用于测量角速度 (单位：°&#x2F;s 或 rad&#x2F;s)。</li></ul><p>有些 IMU 还包含磁力计 (Compass) 和温度计，但基础的六轴 IMU 只包含加速度计和陀螺仪。</p><p>查阅官方文档可知，Arduino Nano RP2040 Connect 板载 IMU 是 <strong>LSM6DSOX</strong>，它是一个六轴传感器：</p><ul><li><p>**加速度计 (Accelerometer)**：测量线性加速度 (单位：m&#x2F;s²)。</p></li><li><p>**陀螺仪 (Gyroscope)**：测量角速度 (单位：°&#x2F;s)。</p></li></ul><h2 id="2-安装Arduino-LSM6DSOX库"><a href="#2-安装Arduino-LSM6DSOX库" class="headerlink" title="2.安装Arduino_LSM6DSOX库"></a>2.安装Arduino_LSM6DSOX库</h2><p><img src="https://raw.githubusercontent.com/Peter-JiY/pictures/main//2024/image-20241119201744973.png" alt="image-20241119201744973"></p><p>新建一个开始新的任务。</p><p><img src="https://raw.githubusercontent.com/Peter-JiY/pictures/main//2024/image-20241119202208888.png" alt="image-20241119202208888"></p><p>根据官方文档的函数，我们可以得到如下代码：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Arduino_LSM6DSOX.h&gt;</span> <span class="comment">// 引入 LSM6DSOX 库</span></span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">setup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// put your setup code here, to run once:</span></span><br><span class="line">  Serial.<span class="built_in">begin</span>(<span class="number">115200</span>);</span><br><span class="line">  <span class="comment">// 初始化 IMU</span></span><br><span class="line">  <span class="keyword">if</span> (!IMU.<span class="built_in">begin</span>()) &#123;</span><br><span class="line">    Serial.<span class="built_in">println</span>(<span class="string">&quot;无法检测到 LSM6DSOX 传感器!&quot;</span>);</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>); <span class="comment">// 停止运行</span></span><br><span class="line">  &#125;</span><br><span class="line">  Serial.<span class="built_in">println</span>(<span class="string">&quot;LSM6DSOX 初始化成功!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">loop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// put your main code here, to run repeatedly:</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 检测加速度和陀螺仪是否可用</span></span><br><span class="line">  <span class="keyword">if</span> (IMU.<span class="built_in">accelerationAvailable</span>() &amp;&amp; IMU.<span class="built_in">gyroscopeAvailable</span>()) &#123;</span><br><span class="line">    <span class="comment">// 读取加速度数据 (单位：m/s²)</span></span><br><span class="line">    IMU.<span class="built_in">readAcceleration</span>(Ax, Ay, Az);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 读取陀螺仪数据 (单位：°/s)</span></span><br><span class="line">    IMU.<span class="built_in">readGyroscope</span>(Gx, Gy, Gz);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打印加速度数据</span></span><br><span class="line">    Serial.<span class="built_in">print</span>(<span class="string">&quot;加速度 (m/s²): &quot;</span>);</span><br><span class="line">    Serial.<span class="built_in">print</span>(<span class="string">&quot;X = &quot;</span>);</span><br><span class="line">    Serial.<span class="built_in">print</span>(Ax);</span><br><span class="line">    Serial.<span class="built_in">print</span>(<span class="string">&quot;, Y = &quot;</span>);</span><br><span class="line">    Serial.<span class="built_in">print</span>(Ay);</span><br><span class="line">    Serial.<span class="built_in">print</span>(<span class="string">&quot;, Z = &quot;</span>);</span><br><span class="line">    Serial.<span class="built_in">println</span>(Az);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打印陀螺仪数据</span></span><br><span class="line">    Serial.<span class="built_in">print</span>(<span class="string">&quot;陀螺仪 (°/s): &quot;</span>);</span><br><span class="line">    Serial.<span class="built_in">print</span>(<span class="string">&quot;X = &quot;</span>);</span><br><span class="line">    Serial.<span class="built_in">print</span>(Gx);</span><br><span class="line">    Serial.<span class="built_in">print</span>(<span class="string">&quot;, Y = &quot;</span>);</span><br><span class="line">    Serial.<span class="built_in">print</span>(Gy);</span><br><span class="line">    Serial.<span class="built_in">print</span>(<span class="string">&quot;, Z = &quot;</span>);</span><br><span class="line">    Serial.<span class="built_in">println</span>(Gz);</span><br><span class="line"></span><br><span class="line">    Serial.<span class="built_in">println</span>(); <span class="comment">// 空一行</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">delay</span>(<span class="number">100</span>); <span class="comment">// 延时，控制数据刷新频率</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3-查看结果"><a href="#3-查看结果" class="headerlink" title="3.查看结果"></a>3.查看结果</h2><p>运行查看串口结果：</p><p><img src="https://raw.githubusercontent.com/Peter-JiY/pictures/main//2024/image-20241119203202884.png" alt="image-20241119203202884"></p><h1 id="任务三：学习PDM麦克风技术知识，调试PDM麦克风，通过串口打印收音数据和音频波形。"><a href="#任务三：学习PDM麦克风技术知识，调试PDM麦克风，通过串口打印收音数据和音频波形。" class="headerlink" title="任务三：学习PDM麦克风技术知识，调试PDM麦克风，通过串口打印收音数据和音频波形。"></a>任务三：学习PDM麦克风技术知识，调试PDM麦克风，通过串口打印收音数据和音频波形。</h1><h2 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1.准备工作"></a>1.准备工作</h2><p><strong>PDM 麦克风</strong> 使用脉冲密度调制技术输出数字音频数据，其输出信号需要经过解码转换为 PCM（脉冲编码调制）数据，才能被处理为音频信号。</p><p><strong>板载麦克风型号</strong>：Nano RP2040 Connect 上的 PDM 麦克风型号为 <strong>MP34DT06JTR</strong>。</p><p>PDM的库在安装IDE的集成在里面了</p><h2 id="2-撰写代码"><a href="#2-撰写代码" class="headerlink" title="2.撰写代码"></a>2.撰写代码</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;PDM.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义缓冲区大小（可以调整以适应需求）</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BUFFER_SIZE 512</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 缓冲区存储麦克风数据</span></span><br><span class="line"><span class="type">short</span> buffer[BUFFER_SIZE];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 记录是否有新数据的标志</span></span><br><span class="line"><span class="keyword">volatile</span>  <span class="type">int</span> bytesRead;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化采样率和通道数</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> sampleRate = <span class="number">16000</span>; <span class="comment">// 16 kHz 采样率</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> numChannels = <span class="number">1</span>;    <span class="comment">// 单声道</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">setup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 初始化串口</span></span><br><span class="line">  Serial.<span class="built_in">begin</span>(<span class="number">115200</span>);</span><br><span class="line">  <span class="keyword">while</span> (!Serial) &#123;</span><br><span class="line">    <span class="built_in">delay</span>(<span class="number">10</span>); <span class="comment">// 等待串口就绪</span></span><br><span class="line">  &#125;</span><br><span class="line">  Serial.<span class="built_in">println</span>(<span class="string">&quot;PDM 麦克风初始化中...&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 初始化 PDM 麦克风</span></span><br><span class="line">  <span class="keyword">if</span> (!PDM.<span class="built_in">begin</span>(numChannels, sampleRate)) &#123;</span><br><span class="line">    Serial.<span class="built_in">println</span>(<span class="string">&quot;PDM 麦克风初始化失败！&quot;</span>);</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>); <span class="comment">// 停止程序</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 设置缓冲区大小</span></span><br><span class="line">  PDM.<span class="built_in">setBufferSize</span>(BUFFER_SIZE);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 注册音频数据回调函数</span></span><br><span class="line">  PDM.<span class="built_in">onReceive</span>(onPDMData);</span><br><span class="line"></span><br><span class="line">  Serial.<span class="built_in">println</span>(<span class="string">&quot;PDM 麦克风初始化成功！&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">loop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 检查是否有新数据</span></span><br><span class="line">  <span class="keyword">if</span> (bytesRead) &#123;</span><br><span class="line">    <span class="comment">// 打印音频数据到串口监视器</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; bytesRead; i++) &#123;</span><br><span class="line">      Serial.<span class="built_in">println</span>(buffer[i]); <span class="comment">// 打印到串口监视器或绘图器</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 延迟以防止串口拥堵（调整为实际需求）</span></span><br><span class="line">  <span class="built_in">delay</span>(<span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 回调函数：处理音频数据</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">onPDMData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="type">int</span> bytesAvailable = PDM.<span class="built_in">available</span>(); <span class="comment">// 获取数据字节数</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 确保缓冲区足够大以存储数据</span></span><br><span class="line">  PDM.<span class="built_in">read</span>(buffer, bytesAvailable); <span class="comment">// 从 PDM 读取数据</span></span><br><span class="line"></span><br><span class="line">  bytesRead =  bytesAvailable /<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-查看串口"><a href="#3-查看串口" class="headerlink" title="3.查看串口"></a>3.查看串口</h2><p><img src="https://raw.githubusercontent.com/Peter-JiY/pictures/main//2024/image-20241119215201949.png" alt="image-20241119215201949"></p><p><img src="https://raw.githubusercontent.com/Peter-JiY/pictures/main//2024/image-20241119215227032.png" alt="image-20241119215227032"></p>]]></content>
      
      
      <categories>
          
          <category> ardunio </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ardunio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于hexo静态文件内置图表无法显示问题</title>
      <link href="/post/20241115101229.html"/>
      <url>/post/20241115101229.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>偶然间发现typora的图表功能，发现挺哇塞，最起码不用再打开专业工具，画图导出，巴拉巴拉。</p><p>估计我也就这一股新奇的劲。。。</p><p>言归正传</p><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>我采用的hexo+githubpage的方式搭建的博客，本地写的一些流程图都能渲染成功，为何上传到GitHub，网页展示全代码块</p><p><img src="https://raw.githubusercontent.com/Peter-JiY/pictures/main//image-20241115101810791.png" alt="image-20241115101810791"></p><p>如果渲染正常应该是这样的：</p><p><img src="https://raw.githubusercontent.com/Peter-JiY/pictures/main//image-20241115101910653.png" alt="image-20241115101910653"></p><p>不应该啊，我第一时间思考到这个软件大多数都是通过css渲染实现的，去谷歌一看，已经有人做出了相关的插件。hexo-filter-mermaid-diagrams。</p><p>原因在于转静态文件时，无法识别相关的绘图代码块，按照text转码展示。</p><h1 id="尝试"><a href="#尝试" class="headerlink" title="尝试"></a>尝试</h1><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">npm install hexo-filter-mermaid-diagrams</span><br></pre></td></tr></table></figure><p>按将插件安装上</p><p>然后再_config.yaml里面添加上mermaid的相关配置</p><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">#mermaid绘图</span><br><span class="line">mermaid:</span><br><span class="line">  enable: true</span><br><span class="line">  version: &quot;7.1.2&quot; # 可根据需要指定版本</span><br><span class="line">  options: # 可选配置</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我 hexo clean+hexo g +hexo d一套组合拳下来还是不行，我在想是什么问题，去查阅作者博客一看，作者<a href="https://github.com/webappdevelp/hexo-filter-mermaid-diagrams">GitHub</a></p><p>还需修改最后一处：</p><p>找到\themes\butterfly\layout\下面的footer.pug。我是butterfly主题，所以我的是pug文件，具体可以参照<a href="https://github.com/webappdevelp/hexo-filter-mermaid-diagrams">作者GitHub主页</a>。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if theme.mermaid.enable == true</span><br><span class="line">  script(type=&#x27;text/javascript&#x27;, id=&#x27;maid-script&#x27; mermaidoptioins=theme.mermaid.options src=&#x27;https://cdn.jsdelivr.net/npm/mermaid@&#x27;+ theme.mermaid.version + &#x27;/dist/mermaid.min.js&#x27; + &#x27;?v=&#x27; + theme.version)</span><br><span class="line">  script.</span><br><span class="line">    if (window.mermaid) &#123;</span><br><span class="line">      var options = JSON.parse(document.getElementById(&#x27;maid-script&#x27;).getAttribute(&#x27;mermaidoptioins&#x27;));</span><br><span class="line">      mermaid.initialize(options);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>由于源中转失效，去mermaid找了新的。</p><p>还是不行。</p><p><img src="https://raw.githubusercontent.com/Peter-JiY/pictures/main//image-20241115152006821.png" alt="image-20241115152006821"></p><p>结果发现有两个config，想起来当时搭博客的时候新建的，其二取一，优先按照butterfly后缀的config文件来。</p><p>将config文件添加如下：</p><p><img src="https://raw.githubusercontent.com/Peter-JiY/pictures/main//image-20241115152258999.png" alt="image-20241115152258999"></p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">mermaid:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">version:</span> <span class="number">11.4</span><span class="number">.0</span></span><br><span class="line">  <span class="comment"># built-in themes: default/forest/dark/neutral</span></span><br><span class="line">  <span class="attr">code_write:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">theme:</span></span><br><span class="line">    <span class="attr">light:</span> <span class="string">default</span></span><br><span class="line">    <span class="attr">dark:</span> <span class="string">dark</span></span><br></pre></td></tr></table></figure><p>最新版为11.4.0,所以添加上版本号并将enable改为true。</p><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo generate</span><br></pre></td></tr></table></figure><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>等待更新</p><p><img src="https://raw.githubusercontent.com/Peter-JiY/pictures/main//image-20241115152828344.png" alt="image-20241115152828344"></p><p>大功告成</p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> typora </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>typora画图的基本语法</title>
      <link href="/post/20241114211744.html"/>
      <url>/post/20241114211744.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>本文档旨在本人开发程序时更好的撰写开发文档，参考阅读使用。</p><p>主要是一些常用的绘图，其他请参考<a href="https://mermaid.js.org/syntax/flowchart.html">Mermaid</a></p><h1 id="1-流程图"><a href="#1-流程图" class="headerlink" title="1.流程图"></a>1.流程图</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">```flow</span><br><span class="line">st=&gt;start: Start</span><br><span class="line">op=&gt;operation: Your Operation</span><br><span class="line">cond=&gt;condition: Yes or No?</span><br><span class="line">e=&gt;end</span><br><span class="line"></span><br><span class="line">st-&gt;op-&gt;cond</span><br><span class="line">cond(yes)-&gt;e</span><br><span class="line">cond(no)-&gt;op</span><br><span class="line">```</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Peter-JiY/pictures/main//image-20241115150851694.png" alt="image-20241115150851694"></p><h1 id="2-使用内置mermaid画图"><a href="#2-使用内置mermaid画图" class="headerlink" title="2.使用内置mermaid画图"></a>2.使用内置mermaid画图</h1><h2 id="1-流程图-1"><a href="#1-流程图-1" class="headerlink" title="1.流程图"></a>1.流程图</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">graph TD;</span><br><span class="line">    A--&gt;B;</span><br><span class="line">    A--&gt;C;</span><br><span class="line">    A--&gt;E--&gt;F--&gt;G;</span><br><span class="line">    E--&gt;G;</span><br><span class="line">    B--&gt;D;</span><br><span class="line">    F--&gt;D;</span><br><span class="line">    B--&gt;G;</span><br><span class="line">    C--&gt;D;</span><br><span class="line">    C--&gt;G--&gt;A;</span><br></pre></td></tr></table></figure><pre class="mermaid">graph TD;    A-->B;    A-->C;    A-->E-->F-->G;    E-->G;    B-->D;    F-->D;    B-->G;    C-->D;    C-->G-->A;</pre><h2 id="2-时序图"><a href="#2-时序图" class="headerlink" title="2.时序图"></a>2.时序图</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%% Example of sequence diagram</span><br><span class="line">  sequenceDiagram</span><br><span class="line">    Alice-&gt;&gt;Bob: Hello Bob, how are you?</span><br><span class="line">    alt is sick</span><br><span class="line">    Bob-&gt;&gt;Alice: Not so good :(</span><br><span class="line">    else is well</span><br><span class="line">    Bob-&gt;&gt;Alice: Feeling fresh like a daisy</span><br><span class="line">    end</span><br><span class="line">    opt Extra response</span><br><span class="line">    Bob-&gt;&gt;Alice: Thanks for asking</span><br><span class="line">    end</span><br></pre></td></tr></table></figure><pre class="mermaid">%% Example of sequence diagram  sequenceDiagram    Alice->>Bob: Hello Bob, how are you?    alt is sick    Bob->>Alice: Not so good :(    else is well    Bob->>Alice: Feeling fresh like a daisy    end    opt Extra response    Bob->>Alice: Thanks for asking    end</pre><h2 id="3-类图"><a href="#3-类图" class="headerlink" title="3.类图"></a>3.类图</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">classDiagram</span><br><span class="line">      Animal &lt;|-- Duck</span><br><span class="line">      Animal &lt;|-- Fish</span><br><span class="line">      Animal &lt;|-- Zebra</span><br><span class="line">      Animal : +int age</span><br><span class="line">      Animal : +String gender</span><br><span class="line">      Animal: +isMammal()</span><br><span class="line">      Animal: +mate()</span><br><span class="line">      class Duck&#123;</span><br><span class="line">          +String beakColor</span><br><span class="line">          +swim()</span><br><span class="line">          +quack()</span><br><span class="line">      &#125;</span><br><span class="line">      class Fish&#123;</span><br><span class="line">          -int sizeInFeet</span><br><span class="line">          -canEat()</span><br><span class="line">      &#125;</span><br><span class="line">      class Zebra&#123;</span><br><span class="line">          +bool is_wild</span><br><span class="line">          +run()</span><br><span class="line">      &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><pre class="mermaid">classDiagram      Animal <|-- Duck      Animal <|-- Fish      Animal <|-- Zebra      Animal : +int age      Animal : +String gender      Animal: +isMammal()      Animal: +mate()      class Duck{          +String beakColor          +swim()          +quack()      }      class Fish{          -int sizeInFeet          -canEat()      }      class Zebra{          +bool is_wild          +run()      }</pre><h2 id="4-状态图"><a href="#4-状态图" class="headerlink" title="4.状态图"></a>4.状态图</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">stateDiagram</span><br><span class="line">    [*] --&gt; Still</span><br><span class="line">    Still --&gt; [*]</span><br><span class="line"></span><br><span class="line">    Still --&gt; Moving</span><br><span class="line">    Moving --&gt; Still</span><br><span class="line">    Moving --&gt; Crash</span><br><span class="line">    Crash --&gt; [*]</span><br></pre></td></tr></table></figure><pre class="mermaid">stateDiagram    [*] --> Still    Still --> [*]    Still --> Moving    Moving --> Still    Moving --> Crash    Crash --> [*]</pre><h2 id="5-饼图"><a href="#5-饼图" class="headerlink" title="5.饼图"></a>5.饼图</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pie</span><br><span class="line">    title 进口货物</span><br><span class="line">    &quot;衣物&quot; : 40.86</span><br><span class="line">    &quot;粮食&quot; : 40.05</span><br><span class="line">    &quot;生活用品&quot; : 12.01</span><br><span class="line">    &quot;钢材&quot; :  15</span><br></pre></td></tr></table></figure><pre class="mermaid">pie    title 进口货物    "衣物" : 40.86    "粮食" : 40.05    "生活用品" : 12.01    "钢材" :  15</pre><h2 id="6-需求图"><a href="#6-需求图" class="headerlink" title="6.需求图"></a>6.需求图</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">requirementDiagram</span><br><span class="line"></span><br><span class="line">    requirement test_req &#123;</span><br><span class="line">    id: 1</span><br><span class="line">    text: the test text.</span><br><span class="line">    risk: high</span><br><span class="line">    verifymethod: test</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    element test_entity &#123;</span><br><span class="line">    type: simulation</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    test_entity - satisfies -&gt; test_req</span><br></pre></td></tr></table></figure><pre class="mermaid">requirementDiagram    requirement test_req {    id: 1    text: the test text.    risk: high    verifymethod: test    }    element test_entity {    type: simulation    }    test_entity - satisfies -> test_req</pre><h2 id="7-Git图"><a href="#7-Git图" class="headerlink" title="7.Git图"></a>7.Git图</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gitGraph</span><br><span class="line">       commit</span><br><span class="line">       commit</span><br><span class="line">       branch develop</span><br><span class="line">       checkout develop</span><br><span class="line">       commit</span><br><span class="line">       commit</span><br><span class="line">       checkout main</span><br><span class="line">       merge develop</span><br><span class="line">       commit</span><br><span class="line">       commit</span><br></pre></td></tr></table></figure><pre class="mermaid">gitGraph       commit       commit       branch develop       checkout develop       commit       commit       checkout main       merge develop       commit       commit</pre><h2 id="8-思维导图"><a href="#8-思维导图" class="headerlink" title="8.思维导图"></a>8.思维导图</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mindmap</span><br><span class="line">  root((mindmap))</span><br><span class="line">    Origins</span><br><span class="line">      Long history</span><br><span class="line">      ::icon(fa fa-book)</span><br><span class="line">      Popularisation</span><br><span class="line">        British popular psychology author Tony Buzan</span><br><span class="line">    Research</span><br><span class="line">      On effectiveness&lt;br/&gt;and features</span><br><span class="line">      On Automatic creation</span><br><span class="line">        Uses</span><br><span class="line">            Creative techniques</span><br><span class="line">            Strategic planning</span><br><span class="line">            Argument mapping</span><br><span class="line">    Tools</span><br><span class="line">      Pen and paper</span><br><span class="line">      Mermaid</span><br></pre></td></tr></table></figure><pre class="mermaid">mindmap  root((mindmap))    Origins      Long history      ::icon(fa fa-book)      Popularisation        British popular psychology author Tony Buzan    Research      On effectiveness<br/>and features      On Automatic creation        Uses            Creative techniques            Strategic planning            Argument mapping    Tools      Pen and paper      Mermaid</pre><h2 id="8-甘特图"><a href="#8-甘特图" class="headerlink" title="8.甘特图"></a>8.甘特图</h2><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">gantt</span><br><span class="line">    dateFormat  YYYY-MM-DD</span><br><span class="line">    title       Adding GANTT diagram functionality to mermaid</span><br><span class="line">    excludes    weekends</span><br><span class="line">    %% (`excludes` accepts specific dates in YYYY-MM-DD format, days of the week (&quot;sunday&quot;) or &quot;weekends&quot;, but not the word &quot;weekdays&quot;.)</span><br><span class="line"></span><br><span class="line">    section A section</span><br><span class="line">    Completed task            :done,    des1, 2014-01-06,2014-01-08</span><br><span class="line">    Active task               :active,  des2, 2014-01-09, 3d</span><br><span class="line">    Future task               :         des3, after des2, 5d</span><br><span class="line">    Future task2              :         des4, after des3, 5d</span><br><span class="line"></span><br><span class="line">    section Critical tasks</span><br><span class="line">    Completed task in the critical line :crit, done, 2014-01-06,24h</span><br><span class="line">    Implement parser and jison          :crit, done, after des1, 2d</span><br><span class="line">    Create tests for parser             :crit, active, 3d</span><br><span class="line">    Future task in critical line        :crit, 5d</span><br><span class="line">    Create tests for renderer           :2d</span><br><span class="line">    Add to mermaid                      :until isadded</span><br><span class="line">    Functionality added                 :milestone, isadded, 2014-01-25, 0d</span><br><span class="line"></span><br><span class="line">    section Documentation</span><br><span class="line">    Describe gantt syntax               :active, a1, after des1, 3d</span><br><span class="line">    Add gantt diagram to demo page      :after a1  , 20h</span><br><span class="line">    Add another diagram to demo page    :doc1, after a1  , 48h</span><br><span class="line"></span><br><span class="line">    section Last section</span><br><span class="line">    Describe gantt syntax               :after doc1, 3d</span><br><span class="line">    Add gantt diagram to demo page      :20h</span><br><span class="line">    Add another diagram to demo page    :48h</span><br></pre></td></tr></table></figure><pre class="mermaid">gantt    dateFormat  YYYY-MM-DD    title       Adding GANTT diagram functionality to mermaid    excludes    weekends    %% (`excludes` accepts specific dates in YYYY-MM-DD format, days of the week ("sunday") or "weekends", but not the word "weekdays".)    section A section    Completed task            :done,    des1, 2014-01-06,2014-01-08    Active task               :active,  des2, 2014-01-09, 3d    Future task               :         des3, after des2, 5d    Future task2              :         des4, after des3, 5d    section Critical tasks    Completed task in the critical line :crit, done, 2014-01-06,24h    Implement parser and jison          :crit, done, after des1, 2d    Create tests for parser             :crit, active, 3d    Future task in critical line        :crit, 5d    Create tests for renderer           :2d    Add to mermaid                      :until isadded    Functionality added                 :milestone, isadded, 2014-01-25, 0d    section Documentation    Describe gantt syntax               :active, a1, after des1, 3d    Add gantt diagram to demo page      :after a1  , 20h    Add another diagram to demo page    :doc1, after a1  , 48h    section Last section    Describe gantt syntax               :after doc1, 3d    Add gantt diagram to demo page      :20h    Add another diagram to demo page    :48h</pre>]]></content>
      
      
      <categories>
          
          <category> typora </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 帮助文档 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于node.js开发的项目开发历程</title>
      <link href="/post/20241029163650.html"/>
      <url>/post/20241029163650.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这是一个练练手的项目，开发起始时间为2024.10.29<br>尽量赶在一周内完成该项目的开发。<br>项目——<strong>连锁餐厅管理系统</strong><br>采用前后端分离的方式创建系统，首先前端打算采用Vue 2 + Vuex + Vue Router。</p><p>计划临时有变，新的更改为全栈采用node.js</p><h1 id="实践-前端"><a href="#实践-前端" class="headerlink" title="实践-前端"></a>实践-前端</h1><h2 id="1-基础配置"><a href="#1-基础配置" class="headerlink" title="1.基础配置"></a>1.基础配置</h2><h3 id="1-首先安装Node-js和npm。此处略过…"><a href="#1-首先安装Node-js和npm。此处略过…" class="headerlink" title="1.首先安装Node.js和npm。此处略过…."></a>1.首先安装Node.js和npm。此处略过….</h3><p>使用 Vue CLI创建Vue项目。</p><h3 id="2-安装-Vue-CL："><a href="#2-安装-Vue-CL：" class="headerlink" title="2.安装 Vue CL："></a>2.安装 Vue CL：</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g @vue/cli</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">yarn global add @vue/cli</span><br></pre></td></tr></table></figure><p>在webstrome里创建一个新的项目。此处要设置为</p><p><img src="https://raw.githubusercontent.com/Peter-JiY/pictures/main//image-20241029165150661.png" alt="image-20241029165150661"></p><p>vue&#x2F;cli vue。一定要是这个，不然后面会有冲突版本的。</p><h3 id="3-安装-Element-UI："><a href="#3-安装-Element-UI：" class="headerlink" title="3.安装 Element UI："></a>3.安装 Element UI：</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install element-ui</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">yarn add element-ui</span><br></pre></td></tr></table></figure><p>项目引入</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ElementUI</span> <span class="keyword">from</span> <span class="string">&#x27;element-ui&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;element-ui/lib/theme-chalk/index.css&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">ElementUI</span>);</span><br></pre></td></tr></table></figure><h3 id="4-配置Vue-Router和Vuex"><a href="#4-配置Vue-Router和Vuex" class="headerlink" title="4.配置Vue Router和Vuex"></a>4.配置Vue Router和Vuex</h3><p>安装</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install vue-router vuex</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">yarn add vue-router vuex</span><br></pre></td></tr></table></figure><p>修正一下：</p><p>上述命令与Vue2不兼容调整为：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install vuex@3</span><br></pre></td></tr></table></figure><p>配置Vue Router：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// src/router/index.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueRouter</span> <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;../views/Home.vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">VueRouter</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Home&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">Home</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 更多路由</span></span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&#x27;history&#x27;</span>,</span><br><span class="line">  <span class="attr">base</span>: process.<span class="property">env</span>.<span class="property">BASE_URL</span>,</span><br><span class="line">  routes</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>配置Vuex：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// src/store/index.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vuex</span> <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Vuex</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">  <span class="attr">state</span>: &#123;&#125;,</span><br><span class="line">  <span class="attr">mutations</span>: &#123;&#125;,</span><br><span class="line">  <span class="attr">actions</span>: &#123;&#125;,</span><br><span class="line">  <span class="attr">modules</span>: &#123;&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="5-关于对Vuex的一些理解："><a href="#5-关于对Vuex的一些理解：" class="headerlink" title="5.关于对Vuex的一些理解："></a>5.关于对Vuex的一些理解：</h3><p><strong>比喻：餐厅服务</strong></p><p><strong>想象一下你在一家大型连锁餐厅吃饭，这家餐厅有许多桌子，每桌都有顾客。这些顾客是你的 Vue 组件。他们可能需要点餐（获取数据）、改变订单（更新数据）或者要求结账（删除数据）。</strong></p><p><strong>没有 Vuex 的情况：</strong><br><strong>每个服务员（组件）需要记住每个顾客的所有请求和特殊需求，并且每次服务都需要单独处理，包括去厨房传达信息。如果一桌顾客要改变他们的订单，服务员需要再次跑到厨房去更新信息。这在几桌顾客的情况下可能可行，但想象一下如果有上百桌顾客，这将是多么混乱和容易出错！</strong></p><p><strong>有了 Vuex 的情况：</strong><br><strong>现在，餐厅引入了一个中央订单系统（Vuex）。所有的服务员（组件）通过这个系统来处理订单。当一个顾客要点餐时，服务员只需将请求输入到这个中央系统。如果顾客想要修改订单，服务员只需在系统中更新即可，而不需要记住每一个细节或亲自去厨房。</strong></p><p><strong>这个系统确保了所有的信息都在一个地方集中管理，所有的服务员都可以实时看到最新的订单状态，整个过程变得更高效和有序。此外，如果需要对订单进行任何统计或报告，系统可以轻松提供这些信息。</strong></p><p><strong>Vuex 在 Vue 应用中的具体作用：</strong></p><ol><li><strong>集中管理状态：Vuex 为所有组件提供一个集中的状态存储，所有状态的变更都是可预测和可追踪的。</strong></li><li><strong>维护状态的一致性：在多个组件和页面之间共享数据时，Vuex 确保数据状态的一致性，无需手动同步各个组件之间的数据。</strong></li><li><strong>调试工具：Vuex 支持时光旅行调试，可以帮助你在开发过程中轻松追踪数据的变化和状态的变更。</strong></li></ol><p><strong>通过上述比喻和解释，希望你能更清楚地理解 Vuex 在管理和维护大型 Vue 应用中的重要性和便利性。简而言之，Vuex 就像一个使所有部分都有序运作的中央大脑，使得数据管理变得清晰和高效。</strong></p><h2 id="2-编写组件"><a href="#2-编写组件" class="headerlink" title="2.编写组件"></a>2.编写组件</h2><h2 id="3-路由管理"><a href="#3-路由管理" class="headerlink" title="3.路由管理"></a>3.路由管理</h2><h1 id="实践-后端"><a href="#实践-后端" class="headerlink" title="实践-后端"></a>实践-后端</h1><h2 id="1-express"><a href="#1-express" class="headerlink" title="1.express"></a>1.express</h2><p>安装express</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i express</span><br></pre></td></tr></table></figure><p>安装nodemon</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i nodemon</span><br></pre></td></tr></table></figure><p>编写server.js</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">PORT</span> = process.<span class="property">env</span>.<span class="property">PORT</span> || <span class="number">3000</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 中间件：解析 JSON 请求体</span></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">json</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试路由</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;欢迎来到我的后端服务器！&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 启动服务器</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="variable constant_">PORT</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`服务器正在运行，监听端口&#x27;Server is running on http://localhost:3000&#x27; <span class="subst">$&#123;PORT&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>搭建web服务框架及相关端口</p><h2 id="2-数据库mysql"><a href="#2-数据库mysql" class="headerlink" title="2.数据库mysql"></a>2.数据库mysql</h2><p>采用mysql2模块。mysql出现错误</p><p><img src="https://raw.githubusercontent.com/Peter-JiY/pictures/main//image-20241029220858920.png" alt="image-20241029220858920"></p><p>经查阅是npm包mysql的问题</p><p>MySQL 8 支持可插拔身份验证方法。默认情况下，使用名为 <code>caching_sha2_password</code> 的其中一个，而不是我们良好的旧<code>mysql_native_password</code> （<a href="https://dev.mysql.com/doc/refman/8.0/en/caching-sha2-pluggable-authentication.html">source</a>）。很明显，使用带有多次握手的加密算法比已经存在了 <a href="https://en.wikipedia.org/wiki/MySQL">24 年的</a>普通密码传递更安全！</p><p>现在，问题是 Node 中的 <code>mysqljs</code>（您使用 <code>npm i mysql</code> 安装并在 Node 代码中使用它的包）尚不支持 MySQL 8 的这种新的默认身份验证方法。问题就在这里。</p><p>具体可以参考大佬的总结：<a href="https://stackoverflow.com/questions/50093144/mysql-8-0-client-does-not-support-authentication-protocol-requested-by-server">https://stackoverflow.com/questions/50093144/mysql-8-0-client-does-not-support-authentication-protocol-requested-by-server</a></p><h1 id="实践"><a href="#实践" class="headerlink" title="实践-"></a>实践-</h1><h2 id="1-创建数据库名及表名称"><a href="#1-创建数据库名及表名称" class="headerlink" title="1.创建数据库名及表名称"></a>1.创建数据库名及表名称</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create database &#x27;resturantsystem&#x27;</span><br></pre></td></tr></table></figure><p>根据要完成的内容构建数据库表</p><ul><li><p>人员信息表</p></li><li><p>公告表</p></li><li><p>菜品表</p></li><li><p>订单表</p></li><li><p>餐厅表</p></li><li><p>···</p><p>人员信息表考虑到需要验证其身份。</p><p>发现自己做的太复杂，最后定义为以下几个表：</p><ul><li>人员信息表</li><li>管理员表</li><li>公告表</li><li>轮播图表</li><li>菜品表</li><li>菜品分类表</li><li>订单表</li></ul></li></ul><p>具体的建表及插入数据就不展示了。</p><h2 id="2-连接数据库及搭建后端"><a href="#2-连接数据库及搭建后端" class="headerlink" title="2.连接数据库及搭建后端"></a>2.连接数据库及搭建后端</h2><h2 id="3-完成管理员端的操作（主要是一些增删改查的逻辑）"><a href="#3-完成管理员端的操作（主要是一些增删改查的逻辑）" class="headerlink" title="3.完成管理员端的操作（主要是一些增删改查的逻辑）"></a>3.完成管理员端的操作（主要是一些增删改查的逻辑）</h2><h2 id="4-完成登录注册（管理员及用户）"><a href="#4-完成登录注册（管理员及用户）" class="headerlink" title="4.完成登录注册（管理员及用户）"></a>4.完成登录注册（管理员及用户）</h2><h2 id="5-完成订单的业务逻辑"><a href="#5-完成订单的业务逻辑" class="headerlink" title="5.完成订单的业务逻辑"></a>5.完成订单的业务逻辑</h2>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> Springboot </tag>
            
            <tag> node.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo主题添加Giscus评论系统（Butterfly主题）</title>
      <link href="/post/20240912102551.html"/>
      <url>/post/20240912102551.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><hr><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>当前使用的hexo生成的静态博客，主题是butterfly。当前主题支持很多的的评论系统：</p><p><img src="https://raw.githubusercontent.com/Peter-JiY/pictures/main//image-20240912111244972.png" alt="image-20240912111244972"></p><p>图中标出来的就是butterfly现在支持的评论系统。</p><p>Giscus是基于GitHub discussions的，再加上我们的博客也在GitHub搭建的，放在一起算了，省心不用管理。反正GitHub的仓库有1G的可存储空间。甚至可以在另外建一个仓库专门做图床使用。</p><p>Giscus主要基于在GitHub Discussion驱动的，全部数据都存储在GitHub Discussion之中，作者可以在GitHub上管理评论，相对于gitalk的授权较少。</p><h2 id="操作流程"><a href="#操作流程" class="headerlink" title="操作流程"></a>操作流程</h2><ol><li>选择一个仓库存储Discussions，开启GitHub Discussions</li><li>安装giscus</li><li>获取配置添加到博客</li></ol><h3 id="1-选择一个仓库"><a href="#1-选择一个仓库" class="headerlink" title="1.选择一个仓库"></a>1.选择一个仓库</h3><p>首先需要生一个仓库我这里采用的是我搭建博客的仓库<u>xxx&#x2F;xxx.github.io</u>。然后我们打开仓库的设置，把discussion打上√</p><p><img src="https://raw.githubusercontent.com/Peter-JiY/pictures/main//image-20240912121253920.png" alt="image-20240912121253920"></p><h3 id="2-着手安装giscus"><a href="#2-着手安装giscus" class="headerlink" title="2.着手安装giscus"></a>2.着手安装giscus</h3><p>点击进入<a href="https://github.com/apps/giscus">这里</a>进入安装界面，这里我我已经install过了所以显示为configure。如果是第一次进入页面应该是绿色的<strong>install</strong>按钮。</p><p><img src="https://raw.githubusercontent.com/Peter-JiY/pictures/main//image-20240912122042556.png" alt="image-20240912122042556"><br>点击<strong>install</strong>后进入新的页面进行设置</p><p><img src="https://raw.githubusercontent.com/Peter-JiY/pictures/main//image-20240912122455370.png" alt="image-20240912122455370"></p><h3 id="3-进入官方获取配置信息"><a href="#3-进入官方获取配置信息" class="headerlink" title="3.进入官方获取配置信息"></a>3.进入官方获取配置信息</h3><p>仓库名填写之前做<strong>discussion</strong>的仓库名。形如  <u>xxx&#x2F;xxx.github.io</u></p><p><img src="https://raw.githubusercontent.com/Peter-JiY/pictures/main//image-20240912123120097.png" alt="image-20240912123120097"></p><p><strong>继续勾选</strong></p><p><img src="https://raw.githubusercontent.com/Peter-JiY/pictures/main//image-20240912123641865.png" alt="image-20240912123641865"></p><p>按照图中勾选</p><p><img src="https://raw.githubusercontent.com/Peter-JiY/pictures/main//image-20240912123745828.png" alt="image-20240912123745828"></p><p>出现形如此类的东西<strong>复制</strong>一份等会需要用到</p><p><img src="https://raw.githubusercontent.com/Peter-JiY/pictures/main//image-20240912123939921.png" alt="image-20240912123939921"></p><p>因为我没填写所以是为空的，你填写就会有东西。</p><h3 id="4-将配置文件写入config"><a href="#4-将配置文件写入config" class="headerlink" title="4.将配置文件写入config"></a>4.将配置文件写入config</h3><p>打开**_config.butterfly.yml<strong>先把</strong>use**这里改了</p><p><img src="https://raw.githubusercontent.com/Peter-JiY/pictures/main//image-20240912124130004.png" alt="image-20240912124130004"></p><p>找到这<strong>giscus</strong>然后对照刚刚复制的script把标红的地方依次填写完整。</p><p><img src="https://raw.githubusercontent.com/Peter-JiY/pictures/main//image-20240912124339222.png" alt="image-20240912124339222"></p><p>然后保存，执行命令。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>稍等片刻查看网站，应该是这样的</p><p><img src="https://raw.githubusercontent.com/Peter-JiY/pictures/main//image-20240912124545071.png" alt="image-20240912124545071"></p><p>快来试试吧。本博客已搭载giscus，欢迎评论。</p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> butterfly </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JDBC连接数据池的相关应用（个人理解学习记录）</title>
      <link href="/post/20240911214241.html"/>
      <url>/post/20240911214241.html</url>
      
        <content type="html"><![CDATA[<p>数据连接池的主要概念就是相当于一的超大的水杯喝水，而每次举起杯子又很麻烦，所以就连上吸管去喝，又不断开，保持一定的连接数。</p><p>我的想法是先写一个通用的连接池连接，然后再根据增删改查的相关，再在小模块里面使用不同的sql语句完成相应的操作，最后返还数据池。</p><p>说的直白点就是登录数据库的操作简化成类模块。</p><p>先写一个通用的模板。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.mchange.v2.c3p0.ComboPooledDataSource;</span><br><span class="line"><span class="keyword">import</span> com.mysql.cj.jdbc.Driver;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">C3P0Utils</span> &#123;</span><br><span class="line">    <span class="comment">// 静态数据源实例</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">ComboPooledDataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ComboPooledDataSource</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 配置C3P0连接池</span></span><br><span class="line">            dataSource.setDriverClass(Driver.class.getName());</span><br><span class="line">            dataSource.setJdbcUrl(<span class="string">&quot;jdbc:mysql://localhost:3306/mydb1&quot;</span>);</span><br><span class="line">            dataSource.setUser(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">            dataSource.setPassword(<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">            dataSource.setInitialPoolSize(<span class="number">10</span>);</span><br><span class="line">            dataSource.setMaxPoolSize(<span class="number">20</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取数据库连接</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title function_">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="keyword">return</span> dataSource.getConnection();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">t1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">preparedStatement</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">resultSet</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 获取连接</span></span><br><span class="line">            conn = C3P0Utils.getConnection();</span><br><span class="line">            <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from user&quot;</span>;</span><br><span class="line">            preparedStatement = conn.prepareStatement(sql);</span><br><span class="line">            resultSet = preparedStatement.executeQuery();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 处理结果集</span></span><br><span class="line">            <span class="keyword">while</span> (resultSet.next()) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;User ID: &quot;</span> + resultSet.getInt(<span class="string">&quot;id&quot;</span>) + <span class="string">&quot;, User Name: &quot;</span> + resultSet.getString(<span class="string">&quot;name&quot;</span>));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 关闭资源</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (resultSet != <span class="literal">null</span>) resultSet.close();</span><br><span class="line">                <span class="keyword">if</span> (preparedStatement != <span class="literal">null</span>) preparedStatement.close();</span><br><span class="line">                <span class="keyword">if</span> (conn != <span class="literal">null</span>) conn.close(); <span class="comment">// 将连接返回给连接池</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后再在自己的需求里面执行不同的增删改查语句即可</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开始</title>
      <link href="/post/20240910210822.html"/>
      <url>/post/20240910210822.html</url>
      
        <content type="html"><![CDATA[<p>你好，欢迎来到我的个人博客。在这里我会分享我的一些项目和心得。<br>早几个月前，我刚刚完成了服务器的搭建，并在其上完成了typecho的搭建，选取的是Joe主题。早就听说了github上的page+hexo的玩法，现在我也尝试成功了。</p>]]></content>
      
      
      <categories>
          
          <category> 心情 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 心情 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
