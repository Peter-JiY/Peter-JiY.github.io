<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>快速构建insightface的demo</title>
      <link href="/post/20241118190259.html"/>
      <url>/post/20241118190259.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近还报名了一个AI嵌入式的小项目，自己玩玩吧。和insightface的内容相关。</p><h1 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h1><hr><h3 id="步骤-1：环境准备"><a href="#步骤-1：环境准备" class="headerlink" title="步骤 1：环境准备"></a><strong>步骤 1：环境准备</strong></h3><ol><li><p><strong>安装必要的软件和工具：</strong></p><ul><li>确保系统安装了以下工具：<ul><li>Python (建议 3.8 以上)</li><li>CUDA (如使用 GPU 加速)</li><li>pip 或 conda 包管理工具</li></ul></li><li>如果没有 GPU，也可以使用 CPU，但速度会慢。</li></ul></li><li><p><strong>克隆 InsightFace 项目代码：</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/deepinsight/insightface.git</span><br><span class="line"><span class="built_in">cd</span> insightface</span><br></pre></td></tr></table></figure></li><li><p><strong>创建虚拟环境并安装依赖：</strong></p><ul><li><p>使用 <code>pip</code> 或 <code>conda</code> 安装依赖：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建虚拟环境并指定版本</span></span><br><span class="line">conda create -n insightface python=3.9</span><br><span class="line"><span class="comment"># 激活虚拟环境</span></span><br><span class="line">conda activate insightface</span><br><span class="line"><span class="comment"># 安装所需依赖</span></span><br><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></table></figure></li><li><p>安装 PyTorch（或 MXNet）：</p><p><img src="https://raw.githubusercontent.com/Peter-JiY/pictures/main//2024/image-20241118192953609.png" alt="image-20241118192953609">去官网查询，找到对应的版本，复制链接下载</p></li><li><pre><code>conda install pytorch torchvision torchaudio pytorch-cuda=11.8 -c pytorch -c nvidia<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">   </span><br><span class="line">4. **下载预训练模型：**</span><br><span class="line">   </span><br><span class="line">   - InsightFace 提供了人脸检测 (RetinaFace) 和识别 (ArcFace) 的预训练模型。</span><br><span class="line">   </span><br><span class="line">   - 下载模型：</span><br><span class="line">     - RetinaFace: https://github.com/deepinsight/insightface/tree/master/detection/retinaface</span><br><span class="line">     - ArcFace 模型库：https://github.com/deepinsight/insightface/tree/master/recognition</span><br><span class="line">     </span><br><span class="line">   - 确保模型文件存储在正确的路径，或自行调整路径。</span><br><span class="line">   </span><br><span class="line">     </span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">### **步骤 2：快速搭建 Demo**</span><br><span class="line"></span><br><span class="line">1. **Demo 脚本结构：**</span><br><span class="line">   - **功能**：加载一张图片，进行人脸检测，然后识别或提取人脸特征。</span><br><span class="line">   - 以下代码展示了一个简单的实现：</span><br><span class="line"></span><br><span class="line">   ```python</span><br><span class="line">   import cv2</span><br><span class="line">   import numpy as np</span><br><span class="line">   from insightface.app import FaceAnalysis</span><br><span class="line">   </span><br><span class="line">   # 1. 初始化人脸分析模型</span><br><span class="line">   def init_insightface():</span><br><span class="line">       app = FaceAnalysis(name=&quot;buffalo_l&quot;)  # 使用 InsightFace 提供的预训练模型</span><br><span class="line">       app.prepare(ctx_id=0, det_size=(640, 640))  # ctx_id=0 表示使用 GPU，-1 表示 CPU</span><br><span class="line">       return app</span><br><span class="line">   </span><br><span class="line">   # 2. 人脸检测与特征提取</span><br><span class="line">   def process_image(app, img_path):</span><br><span class="line">       # 加载图片</span><br><span class="line">       img = cv2.imread(img_path)</span><br><span class="line">       if img is None:</span><br><span class="line">           print(&quot;无法加载图片，请检查路径&quot;)</span><br><span class="line">           return</span><br><span class="line">   </span><br><span class="line">       # 检测人脸</span><br><span class="line">       faces = app.get(img)</span><br><span class="line">       if not faces:</span><br><span class="line">           print(&quot;未检测到人脸&quot;)</span><br><span class="line">           return</span><br><span class="line">   </span><br><span class="line">       # 绘制检测结果</span><br><span class="line">       for face in faces:</span><br><span class="line">           box = face.bbox.astype(int)</span><br><span class="line">           cv2.rectangle(img, (box[0], box[1]), (box[2], box[3]), (255, 0, 0), 2)</span><br><span class="line">           print(&quot;人脸特征向量：&quot;, face.normed_embedding)  # 打印特征向量</span><br><span class="line">   </span><br><span class="line">       # 显示结果</span><br><span class="line">       cv2.imshow(&quot;Detected Faces&quot;, img)</span><br><span class="line">       cv2.waitKey(0)</span><br><span class="line">       cv2.destroyAllWindows()</span><br><span class="line">   </span><br><span class="line">   if __name__ == &quot;__main__&quot;:</span><br><span class="line">       # 初始化</span><br><span class="line">       app = init_insightface()</span><br><span class="line">   </span><br><span class="line">       # 输入图片路径</span><br><span class="line">       img_path = &quot;your_image_path.jpg&quot;  # 替换为你的图片路径</span><br><span class="line">       process_image(app, img_path)</span><br></pre></td></tr></table></figure></code></pre></li></ul></li><li><p><strong>代码说明</strong>：</p><ul><li><code>FaceAnalysis</code> 是 InsightFace 的核心模块，支持人脸检测和特征提取。</li><li><code>ctx_id</code> 设置为 <code>0</code> 时，使用 GPU 加速；设置为 <code>-1</code> 时，使用 CPU。</li><li>检测到的人脸可以通过 <code>bbox</code> 提取位置，<code>normed_embedding</code> 提取特征向量。</li></ul></li></ol><hr><h3 id="步骤-3：运行-Demo"><a href="#步骤-3：运行-Demo" class="headerlink" title="步骤 3：运行 Demo"></a><strong>步骤 3：运行 Demo</strong></h3><ol><li>确保图片路径正确，例如 <code>img_path = &quot;test.jpg&quot;</code>。</li><li>运行脚本：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python demo.py</span><br></pre></td></tr></table></figure></li><li>成功运行后，程序将显示检测到的人脸，并在终端输出人脸的特征向量。</li></ol><hr><h3 id="步骤-4：扩展功能"><a href="#步骤-4：扩展功能" class="headerlink" title="步骤 4：扩展功能"></a><strong>步骤 4：扩展功能</strong></h3><p>在 Demo 基础上，可以尝试添加更多功能：</p><ol><li><p><strong>实时摄像头检测：</strong></p><ul><li>替换图片加载部分，改为调用摄像头：<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cap = cv2.VideoCapture(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    ret, frame = cap.read()</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> ret:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    faces = app.get(frame)</span><br><span class="line">    <span class="comment"># ...绘制检测结果</span></span><br><span class="line">    cv2.imshow(<span class="string">&quot;Real-Time Detection&quot;</span>, frame)</span><br><span class="line">    <span class="keyword">if</span> cv2.waitKey(<span class="number">1</span>) &amp; <span class="number">0xFF</span> == <span class="built_in">ord</span>(<span class="string">&#x27;q&#x27;</span>):</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">cap.release()</span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>人脸匹配（比对）：</strong></p><ul><li>对两张图片提取特征向量，计算余弦相似度判断是否为同一人：<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> scipy.spatial.distance <span class="keyword">import</span> cosine</span><br><span class="line"></span><br><span class="line">embedding1 = face1.normed_embedding</span><br><span class="line">embedding2 = face2.normed_embedding</span><br><span class="line">similarity = <span class="number">1</span> - cosine(embedding1, embedding2)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;相似度：<span class="subst">&#123;similarity&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>批量处理：</strong></p><ul><li>加载文件夹中的多张图片，循环处理。</li></ul></li><li><p><strong>模型优化：</strong></p><ul><li>根据实际需求，使用量化模型或裁剪模型以提升性能。</li></ul></li></ol><hr><h3 id="步骤-5：参考文档与资源"><a href="#步骤-5：参考文档与资源" class="headerlink" title="步骤 5：参考文档与资源"></a><strong>步骤 5：参考文档与资源</strong></h3><ol><li><a href="https://github.com/deepinsight/insightface">InsightFace GitHub 仓库</a></li><li><a href="https://arxiv.org/abs/1801.07698">ArcFace 论文</a></li><li><a href="https://arxiv.org/abs/1905.00641">RetinaFace 论文</a></li></ol><p>​</p>]]></content>
      
      
      
        <tags>
            
            <tag> insightface </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo搭建一个音乐馆</title>
      <link href="/post/20241118152148.html"/>
      <url>/post/20241118152148.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>看到别人的博客有个专门的音乐网页我也心动了</p><img src="https://raw.githubusercontent.com/Peter-JiY/pictures/main//image-20241118153254413.png" alt="image-20241118153254413"  /><h1 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h1><p>先初始化一个页面，专门来做音乐馆的页面。</p><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">hexo new page music</span><br></pre></td></tr></table></figure><p>现在这个页面什么还没有，我们要整上一个工具，也就是一个播放的相关的插件，因为播放需要js支持。</p><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">npm install --save hexo-tag-aplayer</span><br></pre></td></tr></table></figure><p><a href="https://github.com/MoePlayer/hexo-tag-aplayer/blob/master/docs/README-zh_cn.md"><strong>hexo-tag-aplayer</strong></a> 我附上链接了，可以去看看作者的说明文档</p><p>新版本的支持MetingJS。</p><p>找到hexo根目录下的_config.yaml添加</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">aplayer:</span></span><br><span class="line">  <span class="attr">meting:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>在_config.butterfly.yaml里面加上<img src="https://raw.githubusercontent.com/Peter-JiY/pictures/main//image-20241118162334503.png" alt="image-20241118162334503"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">音乐馆: /music/ || fa fa-music</span><br></pre></td></tr></table></figure><p>同时在里面找到<img src="https://raw.githubusercontent.com/Peter-JiY/pictures/main//image-20241118162532794.png" alt="image-20241118162532794"></p><p>将其改成</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Inject the css and script (aplayer/meting)</span></span><br><span class="line"><span class="attr">aplayerInject:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">per_page:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>最后一步，在新建的music文档里面填写</p><p><img src="https://raw.githubusercontent.com/Peter-JiY/pictures/main//image-20241118162749800.png" alt="image-20241118162749800"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% meting &quot;173901981&quot; &quot;netease&quot; &quot;playlist&quot; &quot;autoplay&quot; &quot;mutex:true&quot; &quot;listmaxheight:1140px&quot; &quot;preload:auto&quot; &quot;theme:#ad7a86&quot;%&#125;</span><br></pre></td></tr></table></figure><p>和下面的表格一一对应的，对着找到更改就行，改成自己想要的样式。</p><p>有关  <code>&#123;% meting %&#125;</code>  的选项列表如下:</p><table><thead><tr><th>选项</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>id</td><td><strong>必须值</strong></td><td>歌曲 id &#x2F; 播放列表 id &#x2F; 相册 id &#x2F; 搜索关键字</td></tr><tr><td>server</td><td><strong>必须值</strong></td><td>音乐平台: <code>netease</code>, <code>tencent</code>, <code>kugou</code>, <code>xiami</code>, <code>baidu</code></td></tr><tr><td>type</td><td><strong>必须值</strong></td><td><code>song</code>, <code>playlist</code>, <code>album</code>, <code>search</code>, <code>artist</code></td></tr><tr><td>fixed</td><td><code>false</code></td><td>开启固定模式</td></tr><tr><td>mini</td><td><code>false</code></td><td>开启迷你模式</td></tr><tr><td>loop</td><td><code>all</code></td><td>列表循环模式：<code>all</code>, <code>one</code>,<code>none</code></td></tr><tr><td>order</td><td><code>list</code></td><td>列表播放模式： <code>list</code>, <code>random</code></td></tr><tr><td>volume</td><td>0.7</td><td>播放器音量</td></tr><tr><td>lrctype</td><td>0</td><td>歌词格式类型</td></tr><tr><td>listfolded</td><td><code>false</code></td><td>指定音乐播放列表是否折叠</td></tr><tr><td>storagename</td><td><code>metingjs</code></td><td>LocalStorage 中存储播放器设定的键名</td></tr><tr><td>autoplay</td><td><code>true</code></td><td>自动播放，移动端浏览器暂时不支持此功能</td></tr><tr><td>mutex</td><td><code>true</code></td><td>该选项开启时，如果同页面有其他 aplayer 播放，该播放器会暂停</td></tr><tr><td>listmaxheight</td><td><code>340px</code></td><td>播放列表的最大长度</td></tr><tr><td>preload</td><td><code>auto</code></td><td>音乐文件预载入模式，可选项： <code>none</code>, <code>metadata</code>, <code>auto</code></td></tr><tr><td>theme</td><td><code>#ad7a86</code></td><td>播放器风格色彩设置</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> butterfly </tag>
            
            <tag> Meting </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>katex数学公式的写法</title>
      <link href="/post/20241117210526.html"/>
      <url>/post/20241117210526.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="KaTeX-示例"><a href="#KaTeX-示例" class="headerlink" title="KaTeX 示例"></a>KaTeX 示例</h1><p>KaTeX 是一个快速、可靠的 LaTeX 公式渲染引擎，它可以让你在网页上以漂亮的方式展示数学公式。以下是一些 KaTeX 的常见用法示例。</p><h2 id="行内公式"><a href="#行内公式" class="headerlink" title="行内公式"></a>行内公式</h2><p>你可以使用 <code>$...$</code> 或 <code>\(...\) </code> 来插入行内公式。例如：</p><ul><li>这是一个行内公式的示例：( a^2 + b^2 &#x3D; c^2 )。</li><li>或者：E&#x3D;mc2E &#x3D; mc^2E&#x3D;mc2。</li></ul><p><strong>显示效果：</strong></p><ul><li>a2+b2&#x3D;c2a^2 + b^2 &#x3D; c^2 a2+b2&#x3D;c2</li><li>E&#x3D;mc2 E &#x3D; mc^2 E&#x3D;mc2</li></ul><h2 id="块级公式"><a href="#块级公式" class="headerlink" title="块级公式"></a>块级公式</h2><p>对于块级公式，使用 <code>$$...$$</code> 或 <code>\[...\]</code>。例如：</p><h3 id="例子-1"><a href="#例子-1" class="headerlink" title="例子 1"></a>例子 1</h3><p>这是一个块级公式的示例：</p><figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\[</span></span><br><span class="line"><span class="keyword">\int</span><span class="built_in">_</span>&#123;a&#125;<span class="built_in">^</span>&#123;b&#125; x<span class="built_in">^</span>2 <span class="keyword">\,</span> dx = <span class="keyword">\left</span>. <span class="keyword">\frac</span>&#123;x<span class="built_in">^</span>3&#125;&#123;3&#125; <span class="keyword">\right</span>|<span class="built_in">_</span>&#123;a&#125;<span class="built_in">^</span>&#123;b&#125;</span><br><span class="line"><span class="keyword">\]</span></span><br></pre></td></tr></table></figure><p><strong>显示效果：</strong><br>$$<br>\int_{a}^{b} x^2 , dx &#x3D; \left. \frac{x^3}{3} \right|_{a}^{b}<br>$$</p><h3 id="例子-2"><a href="#例子-2" class="headerlink" title="例子 2"></a>例子 2</h3><p>另一个块级公式的示例：</p><figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\[</span></span><br><span class="line"><span class="keyword">\frac</span>&#123;1&#125;&#123;<span class="keyword">\sqrt</span>&#123;2<span class="keyword">\pi</span> <span class="keyword">\sigma</span><span class="built_in">^</span>2&#125;&#125; <span class="keyword">\exp</span><span class="keyword">\left</span>(-<span class="keyword">\frac</span>&#123;(x - <span class="keyword">\mu</span>)<span class="built_in">^</span>2&#125;&#123;2<span class="keyword">\sigma</span><span class="built_in">^</span>2&#125;<span class="keyword">\right</span>)</span><br><span class="line"><span class="keyword">\]</span></span><br></pre></td></tr></table></figure><p><strong>显示效果：</strong></p><p>$$<br>\frac{1}{\sqrt{2\pi \sigma^2}} \exp\left(-\frac{(x - \mu)^2}{2\sigma^2}\right)<br>$$</p><h2 id="常见公式示例"><a href="#常见公式示例" class="headerlink" title="常见公式示例"></a>常见公式示例</h2><h3 id="1-二次方程"><a href="#1-二次方程" class="headerlink" title="1. 二次方程"></a>1. 二次方程</h3><p>二次方程的一般形式是：</p><figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br><span class="line">ax<span class="built_in">^</span>2 + bx + c = 0</span><br><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br></pre></td></tr></table></figure><p><strong>显示效果：</strong></p><p>$$<br>ax^2 + bx + c &#x3D; 0<br>$$</p><p>它的解可以通过求解以下公式得到：</p><figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br><span class="line">x = <span class="keyword">\frac</span>&#123;-b <span class="keyword">\pm</span> <span class="keyword">\sqrt</span>&#123;b<span class="built_in">^</span>2 - 4ac&#125;&#125;&#123;2a&#125;</span><br><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br></pre></td></tr></table></figure><p><strong>显示效果：</strong></p><p>$$<br>x &#x3D; \frac{-b \pm \sqrt{b^2 - 4ac}}{2a}<br>$$</p><h3 id="2-复数"><a href="#2-复数" class="headerlink" title="2. 复数"></a>2. 复数</h3><p>一个复数的表示形式为：</p><figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br><span class="line">z = a + bi</span><br><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br></pre></td></tr></table></figure><p><strong>显示效果：</strong></p><p>$$<br>z &#x3D; a + bi<br>$$</p><p>其中，(a) 是实部，(b) 是虚部，(i) 是虚数单位，满足 (i^2 &#x3D; -1)。</p><h3 id="3-级数"><a href="#3-级数" class="headerlink" title="3. 级数"></a>3. 级数</h3><p>一个常见的级数是几何级数：</p><figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br><span class="line">S = <span class="keyword">\frac</span>&#123;a&#125;&#123;1 - r&#125;</span><br><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br></pre></td></tr></table></figure><p><strong>显示效果：</strong></p><p>$$<br>S &#x3D; \frac{a}{1 - r}<br>$$</p><p>其中，(a) 是首项，(r) 是公比。</p><h3 id="4-矩阵"><a href="#4-矩阵" class="headerlink" title="4. 矩阵"></a>4. 矩阵</h3><p>一个 $2 \times 2$ 矩阵的示例：</p><figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br><span class="line"><span class="keyword">\begin</span>&#123;bmatrix&#125;</span><br><span class="line">a <span class="built_in">&amp;</span> b <span class="keyword">\\</span></span><br><span class="line">c <span class="built_in">&amp;</span> d</span><br><span class="line"><span class="keyword">\end</span>&#123;bmatrix&#125;</span><br><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br></pre></td></tr></table></figure><p><strong>显示效果：</strong></p><p>$$<br>\begin{bmatrix}<br>a &amp; b \<br>c &amp; d<br>\end{bmatrix}<br>$$</p><h2 id="使用宏"><a href="#使用宏" class="headerlink" title="使用宏"></a>使用宏</h2><p>KaTeX 支持宏，你可以定义自己的数学符号。例如：</p><figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br><span class="line"><span class="keyword">\text</span>&#123;面积&#125; = <span class="keyword">\pi</span> r<span class="built_in">^</span>2</span><br><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br></pre></td></tr></table></figure><p><strong>显示效果：</strong></p><p>$$<br>\text{面积} &#x3D; \pi r^2<br>$$</p><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ul><li>确保你的页面已经正确加载了 KaTeX 的 CSS 和 JavaScript 文件。</li><li>在文档中使用公式时，确保正确使用 <code>$$</code> 和 <code>$</code> 符号，以避免解析错误。</li></ul><hr><h1 id="MathJax-示例"><a href="#MathJax-示例" class="headerlink" title="MathJax 示例"></a>MathJax 示例</h1><p>MathJax 是一个强大的 JavaScript 库，用于在网页上渲染 LaTeX 和 MathML 数学公式。以下是一些 MathJax 的常见用法示例。</p><h2 id="行内公式-1"><a href="#行内公式-1" class="headerlink" title="行内公式"></a>行内公式</h2><p>你可以使用 <code>$...$</code> 或 <code>\( ... \)</code> 来插入行内公式。例如：</p><ul><li>这是一个行内公式的示例：( a^2 + b^2 &#x3D; c^2 )。</li><li>或者：$E &#x3D; mc^2$。</li></ul><p><strong>显示效果：</strong></p><ul><li>$a^2 + b^2 &#x3D; c^2 $</li><li>$ E &#x3D; mc^2 $</li></ul><h2 id="块级公式-1"><a href="#块级公式-1" class="headerlink" title="块级公式"></a>块级公式</h2><p>对于块级公式，使用 <code>$$...$$</code> 或 <code>\[ ... \]</code>。例如：</p><h3 id="例子-1-1"><a href="#例子-1-1" class="headerlink" title="例子 1"></a>例子 1</h3><p>这是一个块级公式的示例：</p><figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\[</span></span><br><span class="line"><span class="keyword">\int</span><span class="built_in">_</span>&#123;a&#125;<span class="built_in">^</span>&#123;b&#125; x<span class="built_in">^</span>2 <span class="keyword">\,</span> dx = <span class="keyword">\left</span>. <span class="keyword">\frac</span>&#123;x<span class="built_in">^</span>3&#125;&#123;3&#125; <span class="keyword">\right</span>|<span class="built_in">_</span>&#123;a&#125;<span class="built_in">^</span>&#123;b&#125;</span><br><span class="line"><span class="keyword">\]</span></span><br></pre></td></tr></table></figure><p><strong>显示效果：</strong></p><p>$$<br>\int_{a}^{b} x^2 , dx &#x3D; \left. \frac{x^3}{3} \right|_{a}^{b}<br>$$</p><h3 id="例子-2-1"><a href="#例子-2-1" class="headerlink" title="例子 2"></a>例子 2</h3><p>另一个块级公式的示例：</p><figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br><span class="line"><span class="keyword">\frac</span>&#123;1&#125;&#123;<span class="keyword">\sqrt</span>&#123;2<span class="keyword">\pi</span> <span class="keyword">\sigma</span><span class="built_in">^</span>2&#125;&#125; <span class="keyword">\exp</span><span class="keyword">\left</span>(-<span class="keyword">\frac</span>&#123;(x - <span class="keyword">\mu</span>)<span class="built_in">^</span>2&#125;&#123;2<span class="keyword">\sigma</span><span class="built_in">^</span>2&#125;<span class="keyword">\right</span>)</span><br><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br></pre></td></tr></table></figure><p><strong>显示效果：</strong></p><p>$$<br>\frac{1}{\sqrt{2\pi \sigma^2}} \exp\left(-\frac{(x - \mu)^2}{2\sigma^2}\right)<br>$$</p><h2 id="常见公式示例-1"><a href="#常见公式示例-1" class="headerlink" title="常见公式示例"></a>常见公式示例</h2><h3 id="1-二次方程-1"><a href="#1-二次方程-1" class="headerlink" title="1. 二次方程"></a>1. 二次方程</h3><p>二次方程的一般形式是：</p><figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br><span class="line">ax<span class="built_in">^</span>2 + bx + c = 0</span><br><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br></pre></td></tr></table></figure><p><strong>显示效果：</strong></p><p>$$<br>ax^2 + bx + c &#x3D; 0<br>$$</p><p>它的解可以通过求解以下公式得到：</p><figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br><span class="line">x = <span class="keyword">\frac</span>&#123;-b <span class="keyword">\pm</span> <span class="keyword">\sqrt</span>&#123;b<span class="built_in">^</span>2 - 4ac&#125;&#125;&#123;2a&#125;</span><br><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br></pre></td></tr></table></figure><p><strong>显示效果：</strong></p><p>$$<br>x &#x3D; \frac{-b \pm \sqrt{b^2 - 4ac}}{2a}<br>$$</p><h3 id="2-复数-1"><a href="#2-复数-1" class="headerlink" title="2. 复数"></a>2. 复数</h3><p>一个复数的表示形式为：</p><figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br><span class="line">z = a + bi</span><br><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br></pre></td></tr></table></figure><p><strong>显示效果：</strong></p><p>$$<br>z &#x3D; a + bi<br>$$</p><p>其中，(a) 是实部，(b) 是虚部，(i) 是虚数单位，满足 (i^2 &#x3D; -1)。</p><h3 id="3-级数-1"><a href="#3-级数-1" class="headerlink" title="3. 级数"></a>3. 级数</h3><p>一个常见的级数是几何级数：</p><figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">S = <span class="keyword">\frac</span>&#123;a&#125;&#123;1 - r&#125;</span><br></pre></td></tr></table></figure><p><strong>显示效果：</strong></p><p>$$<br>S &#x3D; \frac{a}{1 - r}<br>$$</p><p>其中，(a) 是首项，(r) 是公比。</p><h3 id="4-矩阵-1"><a href="#4-矩阵-1" class="headerlink" title="4. 矩阵"></a>4. 矩阵</h3><p>一个 $2 \times 2$ 矩阵的示例：</p><figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br><span class="line"><span class="keyword">\begin</span>&#123;bmatrix&#125;</span><br><span class="line">a <span class="built_in">&amp;</span> b <span class="keyword">\\</span></span><br><span class="line">c <span class="built_in">&amp;</span> d</span><br><span class="line"><span class="keyword">\end</span>&#123;bmatrix&#125;</span><br><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br></pre></td></tr></table></figure><p><strong>显示效果：</strong></p><p>$$<br>\begin{bmatrix}<br>a &amp; b \<br>c &amp; d<br>\end{bmatrix}<br>$$</p><h2 id="使用宏-1"><a href="#使用宏-1" class="headerlink" title="使用宏"></a>使用宏</h2><p>MathJax 支持宏，你可以定义自己的数学符号。例如：</p><figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br><span class="line"><span class="keyword">\text</span>&#123;面积&#125; = <span class="keyword">\pi</span> r<span class="built_in">^</span>2</span><br><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br></pre></td></tr></table></figure><p><strong>显示效果：</strong></p><p>$$<br>\text{面积} &#x3D; \pi r^2<br>$$</p><h2 id="注意事项-1"><a href="#注意事项-1" class="headerlink" title="注意事项"></a>注意事项</h2><ul><li>确保你的页面已经正确加载了 MathJax 的 JavaScript 文件。</li><li>在文档中使用公式时，确保正确使用 <code>$$</code> 和 <code>$</code> 符号，以避免解析错误。</li></ul>]]></content>
      
      
      <categories>
          
          <category> typora </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Katex </tag>
            
            <tag> typora </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ardunio rp2024 connect</title>
      <link href="/post/20241115162913.html"/>
      <url>/post/20241115162913.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近参加了一个followme的活动，活动的任务是ardunio rp2024 connect的板子，主要完成三个任务：</p><ol><li><p>搭建环境并开启第一步Blink三色LED &#x2F; 串口打印Hello DigiKey &amp; EEWorld！；</p></li><li><p>学习IMU基础知识，调试IMU传感器，通过串口打印六轴原始数据；</p></li><li><p>学习PDM麦克风技术知识，调试PDM麦克风，通过串口打印收音数据和音频波形。</p></li></ol><p><img src="https://raw.githubusercontent.com/Peter-JiY/pictures/main//image-20241115163958320.png" alt="image-20241115163958320"></p><p>纯新手，朋友介绍过来玩的硬件。啥也不会，一边学一边玩吧。</p><p>干啥第一件事肯定就是搭环境。</p><p>先去ardunio的<a href="https://www.arduino.cc/en/software">官网</a>，找安装包，安装ardunio的ide。</p><p><img src="https://raw.githubusercontent.com/Peter-JiY/pictures/main//2024/image-20241119164041020.png" alt="image-20241119164041020"></p><p>现在板子到日本了，估计过两天就到了。</p><img src="https://raw.githubusercontent.com/Peter-JiY/pictures/main//image-20241115170520745.png" alt="image-20241115170520745" style="zoom:50%;" /><hr><p>今天终于到了。开箱！！！</p><img src="https://raw.githubusercontent.com/Peter-JiY/pictures/main//2024/IMG_7019.JPG" alt="IMG_7019" style="zoom: 25%;" /><img src="https://raw.githubusercontent.com/Peter-JiY/pictures/main//2024/IMG_7021.JPG" alt="IMG_7020" style="zoom: 25%;" /><img src="https://raw.githubusercontent.com/Peter-JiY/pictures/main//2024/IMG_7022.JPG" alt="IMG_7022" style="zoom:25%;" /><p>由于手头没有mirco的线，先用这个转换头看看。</p><hr><h1 id="尝试"><a href="#尝试" class="headerlink" title="尝试"></a>尝试</h1><h2 id="1-配置开发环境"><a href="#1-配置开发环境" class="headerlink" title="1.配置开发环境"></a>1.配置开发环境</h2><ul><li><p><input checked="" disabled="" type="checkbox"> 安装ardunio2.3.3 IDE</p></li><li><p><input checked="" disabled="" type="checkbox"> 安装板包</p><p>搜索开发板的名字 <strong>arduino nano rp2040 connect</strong></p></li></ul><p><img src="https://raw.githubusercontent.com/Peter-JiY/pictures/main//2024/image-20241119170555726.png" alt="image-20241119170555726"></p><h2 id="2-点灯"><a href="#2-点灯" class="headerlink" title="2.点灯"></a>2.点灯</h2><p><img src="https://raw.githubusercontent.com/Peter-JiY/pictures/main//2024/image-20241119171504358.png" alt="image-20241119171504358"></p><p>在上述的情况下已经完成安装的操作，我们的板子在连接的时候就一直闪烁。表现为一个红灯间接闪烁，一个灯变色间接闪烁，一个绿灯常亮。</p><p><img src="https://raw.githubusercontent.com/Peter-JiY/pictures/main//2024/IMG_7024.JPG" alt="IMG_7024"></p><hr><p>下面开始点灯的操作</p><img src="https://raw.githubusercontent.com/Peter-JiY/pictures/main//2024/image-20241119172019132.png" alt="image-20241119172019132" style="zoom:50%;" /><p>选择Blink,然后点击上传按钮</p><img src="https://raw.githubusercontent.com/Peter-JiY/pictures/main//2024/image-20241119172347916.png" alt="image-20241119172347916" style="zoom:50%;" /><p>我们可以看到，板子的灯也变了</p><img src="https://raw.githubusercontent.com/Peter-JiY/pictures/main//2024/IMG_7027.JPG" alt="IMG_7027" style="zoom:50%;" /><h2 id="恭喜你完成了点灯的操作！！！😘"><a href="#恭喜你完成了点灯的操作！！！😘" class="headerlink" title="恭喜你完成了点灯的操作！！！😘"></a>恭喜你完成了点灯的操作！！！😘</h2><h1 id="任务一：搭建环境并开启第一步Blink三色LED-串口打印Hello-DigiKey-EEWorld！；"><a href="#任务一：搭建环境并开启第一步Blink三色LED-串口打印Hello-DigiKey-EEWorld！；" class="headerlink" title="任务一：搭建环境并开启第一步Blink三色LED &#x2F; 串口打印Hello DigiKey &amp; EEWorld！；"></a>任务一：搭建环境并开启第一步Blink三色LED &#x2F; 串口打印Hello DigiKey &amp; EEWorld！；</h1><h2 id="1-查看官方的引脚图"><a href="#1-查看官方的引脚图" class="headerlink" title="1.查看官方的引脚图"></a>1.查看官方的引脚图</h2><p><img src="https://raw.githubusercontent.com/Peter-JiY/pictures/main//2024/image-20241119192609010.png" alt="image-20241119192609010"></p><p>可以看到我们刚才点灯调用的是LED_BUILTIN的引脚。找到我们本次任务的采用的RGBLED的引脚。</p><p><img src="https://raw.githubusercontent.com/Peter-JiY/pictures/main//2024/image-20241119192825570.png" alt="image-20241119192825570"></p><hr><p>因为之前没搞过硬件不太懂，想当然的认为这里的引脚是RGB LED</p><p><img src="https://raw.githubusercontent.com/Peter-JiY/pictures/main//2024/image-20241119193050448.png" alt="image-20241119193050448"></p><p>一片红灯，我得试试是不是刚才引脚图里面的LEDR&#x2F;LEDG&#x2F;LEDB。</p><p><img src="https://raw.githubusercontent.com/Peter-JiY/pictures/main//2024/image-20241119193251279.png" alt="image-20241119193251279"></p><p>得偿所愿，也是一排红灯。但是有提示，提示这个pin脚在WIFININA的库里面才能使用。我又去<a href="https://docs.arduino.cc/hardware/nano-rp2040-connect/#features">官网</a>找到开发文档，相见恨晚！！</p><hr><p><img src="https://raw.githubusercontent.com/Peter-JiY/pictures/main//2024/image-20241119193748581.png" alt="image-20241119193748581"></p><p>内置的LED。得调库才行。早点发现开发文档就好了。</p><h2 id="2-安装WIFININA库"><a href="#2-安装WIFININA库" class="headerlink" title="2.安装WIFININA库"></a>2.安装WIFININA库</h2><p>好了开始装库WIFININA。</p><p><img src="https://raw.githubusercontent.com/Peter-JiY/pictures/main//2024/image-20241119194537477.png" alt="image-20241119194537477"></p><h2 id="3-成功点亮"><a href="#3-成功点亮" class="headerlink" title="3.成功点亮"></a>3.成功点亮</h2><p><img src="https://raw.githubusercontent.com/Peter-JiY/pictures/main//2024/image-20241119195814100.png" alt="image-20241119195814100"></p><p>运行成功。代码如下：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;WiFiNINA.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">setup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// put your setup code here, to run once:</span></span><br><span class="line">  Serial.<span class="built_in">begin</span>(<span class="number">115200</span>);</span><br><span class="line">  <span class="built_in">pinMode</span>(LEDR,OUTPUT);</span><br><span class="line">  <span class="built_in">pinMode</span>(LEDG,OUTPUT);</span><br><span class="line">  <span class="built_in">pinMode</span>(LEDB,OUTPUT);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">loop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// put your main code here, to run repeatedly:</span></span><br><span class="line">  <span class="comment">//串口打印</span></span><br><span class="line">  Serial.<span class="built_in">println</span>(<span class="string">&quot;Hello DigiKey &amp; EEWorld！&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//亮红灯</span></span><br><span class="line">  <span class="built_in">digitalWrite</span>(LEDR, HIGH);  </span><br><span class="line">  <span class="built_in">delay</span>(<span class="number">1000</span>);                      </span><br><span class="line">  <span class="built_in">digitalWrite</span>(LEDR, LOW);   </span><br><span class="line">  <span class="built_in">delay</span>(<span class="number">1000</span>);                     </span><br><span class="line"></span><br><span class="line">  <span class="comment">//亮绿灯</span></span><br><span class="line">  <span class="built_in">digitalWrite</span>(LEDG, HIGH);  </span><br><span class="line">  <span class="built_in">delay</span>(<span class="number">1000</span>);                     </span><br><span class="line">  <span class="built_in">digitalWrite</span>(LEDG, LOW);   </span><br><span class="line">  <span class="built_in">delay</span>(<span class="number">1000</span>);                  </span><br><span class="line"></span><br><span class="line">  <span class="comment">//亮蓝灯</span></span><br><span class="line">  <span class="built_in">digitalWrite</span>(LEDB, HIGH);  </span><br><span class="line">  <span class="built_in">delay</span>(<span class="number">1000</span>);                     </span><br><span class="line">  <span class="built_in">digitalWrite</span>(LEDB, LOW);   </span><br><span class="line">  <span class="built_in">delay</span>(<span class="number">1000</span>);   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Peter-JiY/pictures/main//2024/IMG_7028.JPG" alt="IMG_7028"></p><p><img src="https://raw.githubusercontent.com/Peter-JiY/pictures/main//2024/IMG_7029.JPG" alt="IMG_7029"></p><p><img src="https://raw.githubusercontent.com/Peter-JiY/pictures/main//2024/IMG_7030.JPG" alt="IMG_7030"></p><h2 id="任务一完成"><a href="#任务一完成" class="headerlink" title="任务一完成"></a>任务一完成</h2><h1 id="任务二：学习IMU基础知识，调试IMU传感器，通过串口打印六轴原始数据"><a href="#任务二：学习IMU基础知识，调试IMU传感器，通过串口打印六轴原始数据" class="headerlink" title="任务二：学习IMU基础知识，调试IMU传感器，通过串口打印六轴原始数据"></a>任务二：学习IMU基础知识，调试IMU传感器，通过串口打印六轴原始数据</h1><p>要学习 IMU (惯性测量单元) 的基础知识，并通过 Arduino IDE 调试 IMU 传感器以通过串口打印六轴原始数据，可以按照以下步骤操作：</p><hr><h2 id="1-什么是-IMU？"><a href="#1-什么是-IMU？" class="headerlink" title="1. 什么是 IMU？"></a><strong>1. 什么是 IMU？</strong></h2><p>IMU 是一种集成传感器模块，通常包含以下传感器：</p><ul><li>**加速度计 (Accelerometer)**：用于测量线性加速度 (单位：g)。</li><li>**陀螺仪 (Gyroscope)**：用于测量角速度 (单位：°&#x2F;s 或 rad&#x2F;s)。</li></ul><p>有些 IMU 还包含磁力计 (Compass) 和温度计，但基础的六轴 IMU 只包含加速度计和陀螺仪。</p><p>查阅官方文档可知，Arduino Nano RP2040 Connect 板载 IMU 是 <strong>LSM6DSOX</strong>，它是一个六轴传感器：</p><ul><li><p>**加速度计 (Accelerometer)**：测量线性加速度 (单位：m&#x2F;s²)。</p></li><li><p>**陀螺仪 (Gyroscope)**：测量角速度 (单位：°&#x2F;s)。</p></li></ul><h2 id="2-安装Arduino-LSM6DSOX库"><a href="#2-安装Arduino-LSM6DSOX库" class="headerlink" title="2.安装Arduino_LSM6DSOX库"></a>2.安装Arduino_LSM6DSOX库</h2><p><img src="https://raw.githubusercontent.com/Peter-JiY/pictures/main//2024/image-20241119201744973.png" alt="image-20241119201744973"></p><p>新建一个开始新的任务。</p><p><img src="https://raw.githubusercontent.com/Peter-JiY/pictures/main//2024/image-20241119202208888.png" alt="image-20241119202208888"></p><p>根据官方文档的函数，我们可以得到如下代码：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Arduino_LSM6DSOX.h&gt;</span> <span class="comment">// 引入 LSM6DSOX 库</span></span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">setup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// put your setup code here, to run once:</span></span><br><span class="line">  Serial.<span class="built_in">begin</span>(<span class="number">115200</span>);</span><br><span class="line">  <span class="comment">// 初始化 IMU</span></span><br><span class="line">  <span class="keyword">if</span> (!IMU.<span class="built_in">begin</span>()) &#123;</span><br><span class="line">    Serial.<span class="built_in">println</span>(<span class="string">&quot;无法检测到 LSM6DSOX 传感器!&quot;</span>);</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>); <span class="comment">// 停止运行</span></span><br><span class="line">  &#125;</span><br><span class="line">  Serial.<span class="built_in">println</span>(<span class="string">&quot;LSM6DSOX 初始化成功!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">loop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// put your main code here, to run repeatedly:</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 检测加速度和陀螺仪是否可用</span></span><br><span class="line">  <span class="keyword">if</span> (IMU.<span class="built_in">accelerationAvailable</span>() &amp;&amp; IMU.<span class="built_in">gyroscopeAvailable</span>()) &#123;</span><br><span class="line">    <span class="comment">// 读取加速度数据 (单位：m/s²)</span></span><br><span class="line">    IMU.<span class="built_in">readAcceleration</span>(Ax, Ay, Az);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 读取陀螺仪数据 (单位：°/s)</span></span><br><span class="line">    IMU.<span class="built_in">readGyroscope</span>(Gx, Gy, Gz);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打印加速度数据</span></span><br><span class="line">    Serial.<span class="built_in">print</span>(<span class="string">&quot;加速度 (m/s²): &quot;</span>);</span><br><span class="line">    Serial.<span class="built_in">print</span>(<span class="string">&quot;X = &quot;</span>);</span><br><span class="line">    Serial.<span class="built_in">print</span>(Ax);</span><br><span class="line">    Serial.<span class="built_in">print</span>(<span class="string">&quot;, Y = &quot;</span>);</span><br><span class="line">    Serial.<span class="built_in">print</span>(Ay);</span><br><span class="line">    Serial.<span class="built_in">print</span>(<span class="string">&quot;, Z = &quot;</span>);</span><br><span class="line">    Serial.<span class="built_in">println</span>(Az);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打印陀螺仪数据</span></span><br><span class="line">    Serial.<span class="built_in">print</span>(<span class="string">&quot;陀螺仪 (°/s): &quot;</span>);</span><br><span class="line">    Serial.<span class="built_in">print</span>(<span class="string">&quot;X = &quot;</span>);</span><br><span class="line">    Serial.<span class="built_in">print</span>(Gx);</span><br><span class="line">    Serial.<span class="built_in">print</span>(<span class="string">&quot;, Y = &quot;</span>);</span><br><span class="line">    Serial.<span class="built_in">print</span>(Gy);</span><br><span class="line">    Serial.<span class="built_in">print</span>(<span class="string">&quot;, Z = &quot;</span>);</span><br><span class="line">    Serial.<span class="built_in">println</span>(Gz);</span><br><span class="line"></span><br><span class="line">    Serial.<span class="built_in">println</span>(); <span class="comment">// 空一行</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">delay</span>(<span class="number">100</span>); <span class="comment">// 延时，控制数据刷新频率</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3-查看结果"><a href="#3-查看结果" class="headerlink" title="3.查看结果"></a>3.查看结果</h2><p>运行查看串口结果：</p><p><img src="https://raw.githubusercontent.com/Peter-JiY/pictures/main//2024/image-20241119203202884.png" alt="image-20241119203202884"></p><h1 id="任务三：学习PDM麦克风技术知识，调试PDM麦克风，通过串口打印收音数据和音频波形。"><a href="#任务三：学习PDM麦克风技术知识，调试PDM麦克风，通过串口打印收音数据和音频波形。" class="headerlink" title="任务三：学习PDM麦克风技术知识，调试PDM麦克风，通过串口打印收音数据和音频波形。"></a>任务三：学习PDM麦克风技术知识，调试PDM麦克风，通过串口打印收音数据和音频波形。</h1><h2 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1.准备工作"></a>1.准备工作</h2><p><strong>PDM 麦克风</strong> 使用脉冲密度调制技术输出数字音频数据，其输出信号需要经过解码转换为 PCM（脉冲编码调制）数据，才能被处理为音频信号。</p><p><strong>板载麦克风型号</strong>：Nano RP2040 Connect 上的 PDM 麦克风型号为 <strong>MP34DT06JTR</strong>。</p><p>PDM的库在安装IDE的集成在里面了</p><h2 id="2-撰写代码"><a href="#2-撰写代码" class="headerlink" title="2.撰写代码"></a>2.撰写代码</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;PDM.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义缓冲区大小（可以调整以适应需求）</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BUFFER_SIZE 512</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 缓冲区存储麦克风数据</span></span><br><span class="line"><span class="type">short</span> buffer[BUFFER_SIZE];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 记录是否有新数据的标志</span></span><br><span class="line"><span class="keyword">volatile</span>  <span class="type">int</span> bytesRead;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化采样率和通道数</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> sampleRate = <span class="number">16000</span>; <span class="comment">// 16 kHz 采样率</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> numChannels = <span class="number">1</span>;    <span class="comment">// 单声道</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">setup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 初始化串口</span></span><br><span class="line">  Serial.<span class="built_in">begin</span>(<span class="number">115200</span>);</span><br><span class="line">  <span class="keyword">while</span> (!Serial) &#123;</span><br><span class="line">    <span class="built_in">delay</span>(<span class="number">10</span>); <span class="comment">// 等待串口就绪</span></span><br><span class="line">  &#125;</span><br><span class="line">  Serial.<span class="built_in">println</span>(<span class="string">&quot;PDM 麦克风初始化中...&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 初始化 PDM 麦克风</span></span><br><span class="line">  <span class="keyword">if</span> (!PDM.<span class="built_in">begin</span>(numChannels, sampleRate)) &#123;</span><br><span class="line">    Serial.<span class="built_in">println</span>(<span class="string">&quot;PDM 麦克风初始化失败！&quot;</span>);</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>); <span class="comment">// 停止程序</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 设置缓冲区大小</span></span><br><span class="line">  PDM.<span class="built_in">setBufferSize</span>(BUFFER_SIZE);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 注册音频数据回调函数</span></span><br><span class="line">  PDM.<span class="built_in">onReceive</span>(onPDMData);</span><br><span class="line"></span><br><span class="line">  Serial.<span class="built_in">println</span>(<span class="string">&quot;PDM 麦克风初始化成功！&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">loop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 检查是否有新数据</span></span><br><span class="line">  <span class="keyword">if</span> (bytesRead) &#123;</span><br><span class="line">    <span class="comment">// 打印音频数据到串口监视器</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; bytesRead; i++) &#123;</span><br><span class="line">      Serial.<span class="built_in">println</span>(buffer[i]); <span class="comment">// 打印到串口监视器或绘图器</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 延迟以防止串口拥堵（调整为实际需求）</span></span><br><span class="line">  <span class="built_in">delay</span>(<span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 回调函数：处理音频数据</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">onPDMData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="type">int</span> bytesAvailable = PDM.<span class="built_in">available</span>(); <span class="comment">// 获取数据字节数</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 确保缓冲区足够大以存储数据</span></span><br><span class="line">  PDM.<span class="built_in">read</span>(buffer, bytesAvailable); <span class="comment">// 从 PDM 读取数据</span></span><br><span class="line"></span><br><span class="line">  bytesRead =  bytesAvailable /<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-查看串口"><a href="#3-查看串口" class="headerlink" title="3.查看串口"></a>3.查看串口</h2><p><img src="https://raw.githubusercontent.com/Peter-JiY/pictures/main//2024/image-20241119215201949.png" alt="image-20241119215201949"></p><p><img src="https://raw.githubusercontent.com/Peter-JiY/pictures/main//2024/image-20241119215227032.png" alt="image-20241119215227032"></p>]]></content>
      
      
      <categories>
          
          <category> ardunio </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ardunio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于hexo静态文件内置图表无法显示问题</title>
      <link href="/post/20241115101229.html"/>
      <url>/post/20241115101229.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>偶然间发现typora的图表功能，发现挺哇塞，最起码不用再打开专业工具，画图导出，巴拉巴拉。</p><p>估计我也就这一股新奇的劲。。。</p><p>言归正传</p><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>我采用的hexo+githubpage的方式搭建的博客，本地写的一些流程图都能渲染成功，为何上传到GitHub，网页展示全代码块</p><p><img src="https://raw.githubusercontent.com/Peter-JiY/pictures/main//image-20241115101810791.png" alt="image-20241115101810791"></p><p>如果渲染正常应该是这样的：</p><p><img src="https://raw.githubusercontent.com/Peter-JiY/pictures/main//image-20241115101910653.png" alt="image-20241115101910653"></p><p>不应该啊，我第一时间思考到这个软件大多数都是通过css渲染实现的，去谷歌一看，已经有人做出了相关的插件。hexo-filter-mermaid-diagrams。</p><p>原因在于转静态文件时，无法识别相关的绘图代码块，按照text转码展示。</p><h1 id="尝试"><a href="#尝试" class="headerlink" title="尝试"></a>尝试</h1><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">npm install hexo-filter-mermaid-diagrams</span><br></pre></td></tr></table></figure><p>按将插件安装上</p><p>然后再_config.yaml里面添加上mermaid的相关配置</p><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">#mermaid绘图</span><br><span class="line">mermaid:</span><br><span class="line">  enable: true</span><br><span class="line">  version: &quot;7.1.2&quot; # 可根据需要指定版本</span><br><span class="line">  options: # 可选配置</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我 hexo clean+hexo g +hexo d一套组合拳下来还是不行，我在想是什么问题，去查阅作者博客一看，作者<a href="https://github.com/webappdevelp/hexo-filter-mermaid-diagrams">GitHub</a></p><p>还需修改最后一处：</p><p>找到\themes\butterfly\layout\下面的footer.pug。我是butterfly主题，所以我的是pug文件，具体可以参照<a href="https://github.com/webappdevelp/hexo-filter-mermaid-diagrams">作者GitHub主页</a>。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if theme.mermaid.enable == true</span><br><span class="line">  script(type=&#x27;text/javascript&#x27;, id=&#x27;maid-script&#x27; mermaidoptioins=theme.mermaid.options src=&#x27;https://cdn.jsdelivr.net/npm/mermaid@&#x27;+ theme.mermaid.version + &#x27;/dist/mermaid.min.js&#x27; + &#x27;?v=&#x27; + theme.version)</span><br><span class="line">  script.</span><br><span class="line">    if (window.mermaid) &#123;</span><br><span class="line">      var options = JSON.parse(document.getElementById(&#x27;maid-script&#x27;).getAttribute(&#x27;mermaidoptioins&#x27;));</span><br><span class="line">      mermaid.initialize(options);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>由于源中转失效，去mermaid找了新的。</p><p>还是不行。</p><p><img src="https://raw.githubusercontent.com/Peter-JiY/pictures/main//image-20241115152006821.png" alt="image-20241115152006821"></p><p>结果发现有两个config，想起来当时搭博客的时候新建的，其二取一，优先按照butterfly后缀的config文件来。</p><p>将config文件添加如下：</p><p><img src="https://raw.githubusercontent.com/Peter-JiY/pictures/main//image-20241115152258999.png" alt="image-20241115152258999"></p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">mermaid:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">version:</span> <span class="number">11.4</span><span class="number">.0</span></span><br><span class="line">  <span class="comment"># built-in themes: default/forest/dark/neutral</span></span><br><span class="line">  <span class="attr">code_write:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">theme:</span></span><br><span class="line">    <span class="attr">light:</span> <span class="string">default</span></span><br><span class="line">    <span class="attr">dark:</span> <span class="string">dark</span></span><br></pre></td></tr></table></figure><p>最新版为11.4.0,所以添加上版本号并将enable改为true。</p><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo generate</span><br></pre></td></tr></table></figure><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>等待更新</p><p><img src="https://raw.githubusercontent.com/Peter-JiY/pictures/main//image-20241115152828344.png" alt="image-20241115152828344"></p><p>大功告成</p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> typora </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>typora画图的基本语法</title>
      <link href="/post/20241114211744.html"/>
      <url>/post/20241114211744.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>本文档旨在本人开发程序时更好的撰写开发文档，参考阅读使用。</p><p>主要是一些常用的绘图，其他请参考<a href="https://mermaid.js.org/syntax/flowchart.html">Mermaid</a></p><h1 id="1-流程图"><a href="#1-流程图" class="headerlink" title="1.流程图"></a>1.流程图</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">```flow</span><br><span class="line">st=&gt;start: Start</span><br><span class="line">op=&gt;operation: Your Operation</span><br><span class="line">cond=&gt;condition: Yes or No?</span><br><span class="line">e=&gt;end</span><br><span class="line"></span><br><span class="line">st-&gt;op-&gt;cond</span><br><span class="line">cond(yes)-&gt;e</span><br><span class="line">cond(no)-&gt;op</span><br><span class="line">```</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Peter-JiY/pictures/main//image-20241115150851694.png" alt="image-20241115150851694"></p><h1 id="2-使用内置mermaid画图"><a href="#2-使用内置mermaid画图" class="headerlink" title="2.使用内置mermaid画图"></a>2.使用内置mermaid画图</h1><h2 id="1-流程图-1"><a href="#1-流程图-1" class="headerlink" title="1.流程图"></a>1.流程图</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">graph TD;</span><br><span class="line">    A--&gt;B;</span><br><span class="line">    A--&gt;C;</span><br><span class="line">    A--&gt;E--&gt;F--&gt;G;</span><br><span class="line">    E--&gt;G;</span><br><span class="line">    B--&gt;D;</span><br><span class="line">    F--&gt;D;</span><br><span class="line">    B--&gt;G;</span><br><span class="line">    C--&gt;D;</span><br><span class="line">    C--&gt;G--&gt;A;</span><br></pre></td></tr></table></figure><pre class="mermaid">graph TD;    A-->B;    A-->C;    A-->E-->F-->G;    E-->G;    B-->D;    F-->D;    B-->G;    C-->D;    C-->G-->A;</pre><h2 id="2-时序图"><a href="#2-时序图" class="headerlink" title="2.时序图"></a>2.时序图</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%% Example of sequence diagram</span><br><span class="line">  sequenceDiagram</span><br><span class="line">    Alice-&gt;&gt;Bob: Hello Bob, how are you?</span><br><span class="line">    alt is sick</span><br><span class="line">    Bob-&gt;&gt;Alice: Not so good :(</span><br><span class="line">    else is well</span><br><span class="line">    Bob-&gt;&gt;Alice: Feeling fresh like a daisy</span><br><span class="line">    end</span><br><span class="line">    opt Extra response</span><br><span class="line">    Bob-&gt;&gt;Alice: Thanks for asking</span><br><span class="line">    end</span><br></pre></td></tr></table></figure><pre class="mermaid">%% Example of sequence diagram  sequenceDiagram    Alice->>Bob: Hello Bob, how are you?    alt is sick    Bob->>Alice: Not so good :(    else is well    Bob->>Alice: Feeling fresh like a daisy    end    opt Extra response    Bob->>Alice: Thanks for asking    end</pre><h2 id="3-类图"><a href="#3-类图" class="headerlink" title="3.类图"></a>3.类图</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">classDiagram</span><br><span class="line">      Animal &lt;|-- Duck</span><br><span class="line">      Animal &lt;|-- Fish</span><br><span class="line">      Animal &lt;|-- Zebra</span><br><span class="line">      Animal : +int age</span><br><span class="line">      Animal : +String gender</span><br><span class="line">      Animal: +isMammal()</span><br><span class="line">      Animal: +mate()</span><br><span class="line">      class Duck&#123;</span><br><span class="line">          +String beakColor</span><br><span class="line">          +swim()</span><br><span class="line">          +quack()</span><br><span class="line">      &#125;</span><br><span class="line">      class Fish&#123;</span><br><span class="line">          -int sizeInFeet</span><br><span class="line">          -canEat()</span><br><span class="line">      &#125;</span><br><span class="line">      class Zebra&#123;</span><br><span class="line">          +bool is_wild</span><br><span class="line">          +run()</span><br><span class="line">      &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><pre class="mermaid">classDiagram      Animal <|-- Duck      Animal <|-- Fish      Animal <|-- Zebra      Animal : +int age      Animal : +String gender      Animal: +isMammal()      Animal: +mate()      class Duck{          +String beakColor          +swim()          +quack()      }      class Fish{          -int sizeInFeet          -canEat()      }      class Zebra{          +bool is_wild          +run()      }</pre><h2 id="4-状态图"><a href="#4-状态图" class="headerlink" title="4.状态图"></a>4.状态图</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">stateDiagram</span><br><span class="line">    [*] --&gt; Still</span><br><span class="line">    Still --&gt; [*]</span><br><span class="line"></span><br><span class="line">    Still --&gt; Moving</span><br><span class="line">    Moving --&gt; Still</span><br><span class="line">    Moving --&gt; Crash</span><br><span class="line">    Crash --&gt; [*]</span><br></pre></td></tr></table></figure><pre class="mermaid">stateDiagram    [*] --> Still    Still --> [*]    Still --> Moving    Moving --> Still    Moving --> Crash    Crash --> [*]</pre><h2 id="5-饼图"><a href="#5-饼图" class="headerlink" title="5.饼图"></a>5.饼图</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pie</span><br><span class="line">    title 进口货物</span><br><span class="line">    &quot;衣物&quot; : 40.86</span><br><span class="line">    &quot;粮食&quot; : 40.05</span><br><span class="line">    &quot;生活用品&quot; : 12.01</span><br><span class="line">    &quot;钢材&quot; :  15</span><br></pre></td></tr></table></figure><pre class="mermaid">pie    title 进口货物    "衣物" : 40.86    "粮食" : 40.05    "生活用品" : 12.01    "钢材" :  15</pre><h2 id="6-需求图"><a href="#6-需求图" class="headerlink" title="6.需求图"></a>6.需求图</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">requirementDiagram</span><br><span class="line"></span><br><span class="line">    requirement test_req &#123;</span><br><span class="line">    id: 1</span><br><span class="line">    text: the test text.</span><br><span class="line">    risk: high</span><br><span class="line">    verifymethod: test</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    element test_entity &#123;</span><br><span class="line">    type: simulation</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    test_entity - satisfies -&gt; test_req</span><br></pre></td></tr></table></figure><pre class="mermaid">requirementDiagram    requirement test_req {    id: 1    text: the test text.    risk: high    verifymethod: test    }    element test_entity {    type: simulation    }    test_entity - satisfies -> test_req</pre><h2 id="7-Git图"><a href="#7-Git图" class="headerlink" title="7.Git图"></a>7.Git图</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gitGraph</span><br><span class="line">       commit</span><br><span class="line">       commit</span><br><span class="line">       branch develop</span><br><span class="line">       checkout develop</span><br><span class="line">       commit</span><br><span class="line">       commit</span><br><span class="line">       checkout main</span><br><span class="line">       merge develop</span><br><span class="line">       commit</span><br><span class="line">       commit</span><br></pre></td></tr></table></figure><pre class="mermaid">gitGraph       commit       commit       branch develop       checkout develop       commit       commit       checkout main       merge develop       commit       commit</pre><h2 id="8-思维导图"><a href="#8-思维导图" class="headerlink" title="8.思维导图"></a>8.思维导图</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mindmap</span><br><span class="line">  root((mindmap))</span><br><span class="line">    Origins</span><br><span class="line">      Long history</span><br><span class="line">      ::icon(fa fa-book)</span><br><span class="line">      Popularisation</span><br><span class="line">        British popular psychology author Tony Buzan</span><br><span class="line">    Research</span><br><span class="line">      On effectiveness&lt;br/&gt;and features</span><br><span class="line">      On Automatic creation</span><br><span class="line">        Uses</span><br><span class="line">            Creative techniques</span><br><span class="line">            Strategic planning</span><br><span class="line">            Argument mapping</span><br><span class="line">    Tools</span><br><span class="line">      Pen and paper</span><br><span class="line">      Mermaid</span><br></pre></td></tr></table></figure><pre class="mermaid">mindmap  root((mindmap))    Origins      Long history      ::icon(fa fa-book)      Popularisation        British popular psychology author Tony Buzan    Research      On effectiveness<br/>and features      On Automatic creation        Uses            Creative techniques            Strategic planning            Argument mapping    Tools      Pen and paper      Mermaid</pre><h2 id="8-甘特图"><a href="#8-甘特图" class="headerlink" title="8.甘特图"></a>8.甘特图</h2><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">gantt</span><br><span class="line">    dateFormat  YYYY-MM-DD</span><br><span class="line">    title       Adding GANTT diagram functionality to mermaid</span><br><span class="line">    excludes    weekends</span><br><span class="line">    %% (`excludes` accepts specific dates in YYYY-MM-DD format, days of the week (&quot;sunday&quot;) or &quot;weekends&quot;, but not the word &quot;weekdays&quot;.)</span><br><span class="line"></span><br><span class="line">    section A section</span><br><span class="line">    Completed task            :done,    des1, 2014-01-06,2014-01-08</span><br><span class="line">    Active task               :active,  des2, 2014-01-09, 3d</span><br><span class="line">    Future task               :         des3, after des2, 5d</span><br><span class="line">    Future task2              :         des4, after des3, 5d</span><br><span class="line"></span><br><span class="line">    section Critical tasks</span><br><span class="line">    Completed task in the critical line :crit, done, 2014-01-06,24h</span><br><span class="line">    Implement parser and jison          :crit, done, after des1, 2d</span><br><span class="line">    Create tests for parser             :crit, active, 3d</span><br><span class="line">    Future task in critical line        :crit, 5d</span><br><span class="line">    Create tests for renderer           :2d</span><br><span class="line">    Add to mermaid                      :until isadded</span><br><span class="line">    Functionality added                 :milestone, isadded, 2014-01-25, 0d</span><br><span class="line"></span><br><span class="line">    section Documentation</span><br><span class="line">    Describe gantt syntax               :active, a1, after des1, 3d</span><br><span class="line">    Add gantt diagram to demo page      :after a1  , 20h</span><br><span class="line">    Add another diagram to demo page    :doc1, after a1  , 48h</span><br><span class="line"></span><br><span class="line">    section Last section</span><br><span class="line">    Describe gantt syntax               :after doc1, 3d</span><br><span class="line">    Add gantt diagram to demo page      :20h</span><br><span class="line">    Add another diagram to demo page    :48h</span><br></pre></td></tr></table></figure><pre class="mermaid">gantt    dateFormat  YYYY-MM-DD    title       Adding GANTT diagram functionality to mermaid    excludes    weekends    %% (`excludes` accepts specific dates in YYYY-MM-DD format, days of the week ("sunday") or "weekends", but not the word "weekdays".)    section A section    Completed task            :done,    des1, 2014-01-06,2014-01-08    Active task               :active,  des2, 2014-01-09, 3d    Future task               :         des3, after des2, 5d    Future task2              :         des4, after des3, 5d    section Critical tasks    Completed task in the critical line :crit, done, 2014-01-06,24h    Implement parser and jison          :crit, done, after des1, 2d    Create tests for parser             :crit, active, 3d    Future task in critical line        :crit, 5d    Create tests for renderer           :2d    Add to mermaid                      :until isadded    Functionality added                 :milestone, isadded, 2014-01-25, 0d    section Documentation    Describe gantt syntax               :active, a1, after des1, 3d    Add gantt diagram to demo page      :after a1  , 20h    Add another diagram to demo page    :doc1, after a1  , 48h    section Last section    Describe gantt syntax               :after doc1, 3d    Add gantt diagram to demo page      :20h    Add another diagram to demo page    :48h</pre>]]></content>
      
      
      <categories>
          
          <category> typora </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 帮助文档 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于node.js开发的项目开发历程</title>
      <link href="/post/20241029163650.html"/>
      <url>/post/20241029163650.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这是一个练练手的项目，开发起始时间为2024.10.29<br>尽量赶在一周内完成该项目的开发。<br>项目——<strong>连锁餐厅管理系统</strong><br>采用前后端分离的方式创建系统，首先前端打算采用Vue 2 + Vuex + Vue Router。</p><p>计划临时有变，新的更改为全栈采用node.js</p><h1 id="实践-前端"><a href="#实践-前端" class="headerlink" title="实践-前端"></a>实践-前端</h1><h2 id="1-基础配置"><a href="#1-基础配置" class="headerlink" title="1.基础配置"></a>1.基础配置</h2><h3 id="1-首先安装Node-js和npm。此处略过…"><a href="#1-首先安装Node-js和npm。此处略过…" class="headerlink" title="1.首先安装Node.js和npm。此处略过…."></a>1.首先安装Node.js和npm。此处略过….</h3><p>使用 Vue CLI创建Vue项目。</p><h3 id="2-安装-Vue-CL："><a href="#2-安装-Vue-CL：" class="headerlink" title="2.安装 Vue CL："></a>2.安装 Vue CL：</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g @vue/cli</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">yarn global add @vue/cli</span><br></pre></td></tr></table></figure><p>在webstrome里创建一个新的项目。此处要设置为</p><p><img src="https://raw.githubusercontent.com/Peter-JiY/pictures/main//image-20241029165150661.png" alt="image-20241029165150661"></p><p>vue&#x2F;cli vue。一定要是这个，不然后面会有冲突版本的。</p><h3 id="3-安装-Element-UI："><a href="#3-安装-Element-UI：" class="headerlink" title="3.安装 Element UI："></a>3.安装 Element UI：</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install element-ui</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">yarn add element-ui</span><br></pre></td></tr></table></figure><p>项目引入</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ElementUI</span> <span class="keyword">from</span> <span class="string">&#x27;element-ui&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;element-ui/lib/theme-chalk/index.css&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">ElementUI</span>);</span><br></pre></td></tr></table></figure><h3 id="4-配置Vue-Router和Vuex"><a href="#4-配置Vue-Router和Vuex" class="headerlink" title="4.配置Vue Router和Vuex"></a>4.配置Vue Router和Vuex</h3><p>安装</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install vue-router vuex</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">yarn add vue-router vuex</span><br></pre></td></tr></table></figure><p>修正一下：</p><p>上述命令与Vue2不兼容调整为：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install vuex@3</span><br></pre></td></tr></table></figure><p>配置Vue Router：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// src/router/index.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueRouter</span> <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;../views/Home.vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">VueRouter</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Home&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">Home</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 更多路由</span></span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&#x27;history&#x27;</span>,</span><br><span class="line">  <span class="attr">base</span>: process.<span class="property">env</span>.<span class="property">BASE_URL</span>,</span><br><span class="line">  routes</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>配置Vuex：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// src/store/index.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vuex</span> <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Vuex</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">  <span class="attr">state</span>: &#123;&#125;,</span><br><span class="line">  <span class="attr">mutations</span>: &#123;&#125;,</span><br><span class="line">  <span class="attr">actions</span>: &#123;&#125;,</span><br><span class="line">  <span class="attr">modules</span>: &#123;&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="5-关于对Vuex的一些理解："><a href="#5-关于对Vuex的一些理解：" class="headerlink" title="5.关于对Vuex的一些理解："></a>5.关于对Vuex的一些理解：</h3><p><strong>比喻：餐厅服务</strong></p><p><strong>想象一下你在一家大型连锁餐厅吃饭，这家餐厅有许多桌子，每桌都有顾客。这些顾客是你的 Vue 组件。他们可能需要点餐（获取数据）、改变订单（更新数据）或者要求结账（删除数据）。</strong></p><p><strong>没有 Vuex 的情况：</strong><br><strong>每个服务员（组件）需要记住每个顾客的所有请求和特殊需求，并且每次服务都需要单独处理，包括去厨房传达信息。如果一桌顾客要改变他们的订单，服务员需要再次跑到厨房去更新信息。这在几桌顾客的情况下可能可行，但想象一下如果有上百桌顾客，这将是多么混乱和容易出错！</strong></p><p><strong>有了 Vuex 的情况：</strong><br><strong>现在，餐厅引入了一个中央订单系统（Vuex）。所有的服务员（组件）通过这个系统来处理订单。当一个顾客要点餐时，服务员只需将请求输入到这个中央系统。如果顾客想要修改订单，服务员只需在系统中更新即可，而不需要记住每一个细节或亲自去厨房。</strong></p><p><strong>这个系统确保了所有的信息都在一个地方集中管理，所有的服务员都可以实时看到最新的订单状态，整个过程变得更高效和有序。此外，如果需要对订单进行任何统计或报告，系统可以轻松提供这些信息。</strong></p><p><strong>Vuex 在 Vue 应用中的具体作用：</strong></p><ol><li><strong>集中管理状态：Vuex 为所有组件提供一个集中的状态存储，所有状态的变更都是可预测和可追踪的。</strong></li><li><strong>维护状态的一致性：在多个组件和页面之间共享数据时，Vuex 确保数据状态的一致性，无需手动同步各个组件之间的数据。</strong></li><li><strong>调试工具：Vuex 支持时光旅行调试，可以帮助你在开发过程中轻松追踪数据的变化和状态的变更。</strong></li></ol><p><strong>通过上述比喻和解释，希望你能更清楚地理解 Vuex 在管理和维护大型 Vue 应用中的重要性和便利性。简而言之，Vuex 就像一个使所有部分都有序运作的中央大脑，使得数据管理变得清晰和高效。</strong></p><h2 id="2-编写组件"><a href="#2-编写组件" class="headerlink" title="2.编写组件"></a>2.编写组件</h2><h2 id="3-路由管理"><a href="#3-路由管理" class="headerlink" title="3.路由管理"></a>3.路由管理</h2><h1 id="实践-后端"><a href="#实践-后端" class="headerlink" title="实践-后端"></a>实践-后端</h1><h2 id="1-express"><a href="#1-express" class="headerlink" title="1.express"></a>1.express</h2><p>安装express</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i express</span><br></pre></td></tr></table></figure><p>安装nodemon</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i nodemon</span><br></pre></td></tr></table></figure><p>编写server.js</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">PORT</span> = process.<span class="property">env</span>.<span class="property">PORT</span> || <span class="number">3000</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 中间件：解析 JSON 请求体</span></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">json</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试路由</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;欢迎来到我的后端服务器！&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 启动服务器</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="variable constant_">PORT</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`服务器正在运行，监听端口&#x27;Server is running on http://localhost:3000&#x27; <span class="subst">$&#123;PORT&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>搭建web服务框架及相关端口</p><h2 id="2-数据库mysql"><a href="#2-数据库mysql" class="headerlink" title="2.数据库mysql"></a>2.数据库mysql</h2><p>采用mysql2模块。mysql出现错误</p><p><img src="https://raw.githubusercontent.com/Peter-JiY/pictures/main//image-20241029220858920.png" alt="image-20241029220858920"></p><p>经查阅是npm包mysql的问题</p><p>MySQL 8 支持可插拔身份验证方法。默认情况下，使用名为 <code>caching_sha2_password</code> 的其中一个，而不是我们良好的旧<code>mysql_native_password</code> （<a href="https://dev.mysql.com/doc/refman/8.0/en/caching-sha2-pluggable-authentication.html">source</a>）。很明显，使用带有多次握手的加密算法比已经存在了 <a href="https://en.wikipedia.org/wiki/MySQL">24 年的</a>普通密码传递更安全！</p><p>现在，问题是 Node 中的 <code>mysqljs</code>（您使用 <code>npm i mysql</code> 安装并在 Node 代码中使用它的包）尚不支持 MySQL 8 的这种新的默认身份验证方法。问题就在这里。</p><p>具体可以参考大佬的总结：<a href="https://stackoverflow.com/questions/50093144/mysql-8-0-client-does-not-support-authentication-protocol-requested-by-server">https://stackoverflow.com/questions/50093144/mysql-8-0-client-does-not-support-authentication-protocol-requested-by-server</a></p><h1 id="实践"><a href="#实践" class="headerlink" title="实践-"></a>实践-</h1><h2 id="1-创建数据库名及表名称"><a href="#1-创建数据库名及表名称" class="headerlink" title="1.创建数据库名及表名称"></a>1.创建数据库名及表名称</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create database &#x27;resturantsystem&#x27;</span><br></pre></td></tr></table></figure><p>根据要完成的内容构建数据库表</p><ul><li><p>人员信息表</p></li><li><p>公告表</p></li><li><p>菜品表</p></li><li><p>订单表</p></li><li><p>餐厅表</p></li><li><p>···</p><p>人员信息表考虑到需要验证其身份。</p><p>发现自己做的太复杂，最后定义为以下几个表：</p><ul><li>人员信息表</li><li>管理员表</li><li>公告表</li><li>轮播图表</li><li>菜品表</li><li>菜品分类表</li><li>订单表</li></ul></li></ul><p>具体的建表及插入数据就不展示了。</p><h2 id="2-连接数据库及搭建后端"><a href="#2-连接数据库及搭建后端" class="headerlink" title="2.连接数据库及搭建后端"></a>2.连接数据库及搭建后端</h2><h2 id="3-完成管理员端的操作（主要是一些增删改查的逻辑）"><a href="#3-完成管理员端的操作（主要是一些增删改查的逻辑）" class="headerlink" title="3.完成管理员端的操作（主要是一些增删改查的逻辑）"></a>3.完成管理员端的操作（主要是一些增删改查的逻辑）</h2><h2 id="4-完成登录注册（管理员及用户）"><a href="#4-完成登录注册（管理员及用户）" class="headerlink" title="4.完成登录注册（管理员及用户）"></a>4.完成登录注册（管理员及用户）</h2><h2 id="5-完成订单的业务逻辑"><a href="#5-完成订单的业务逻辑" class="headerlink" title="5.完成订单的业务逻辑"></a>5.完成订单的业务逻辑</h2>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> Springboot </tag>
            
            <tag> node.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo主题添加Giscus评论系统（Butterfly主题）</title>
      <link href="/post/20240912102551.html"/>
      <url>/post/20240912102551.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><hr><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>当前使用的hexo生成的静态博客，主题是butterfly。当前主题支持很多的的评论系统：</p><p><img src="https://raw.githubusercontent.com/Peter-JiY/pictures/main//image-20240912111244972.png" alt="image-20240912111244972"></p><p>图中标出来的就是butterfly现在支持的评论系统。</p><p>Giscus是基于GitHub discussions的，再加上我们的博客也在GitHub搭建的，放在一起算了，省心不用管理。反正GitHub的仓库有1G的可存储空间。甚至可以在另外建一个仓库专门做图床使用。</p><p>Giscus主要基于在GitHub Discussion驱动的，全部数据都存储在GitHub Discussion之中，作者可以在GitHub上管理评论，相对于gitalk的授权较少。</p><h2 id="操作流程"><a href="#操作流程" class="headerlink" title="操作流程"></a>操作流程</h2><ol><li>选择一个仓库存储Discussions，开启GitHub Discussions</li><li>安装giscus</li><li>获取配置添加到博客</li></ol><h3 id="1-选择一个仓库"><a href="#1-选择一个仓库" class="headerlink" title="1.选择一个仓库"></a>1.选择一个仓库</h3><p>首先需要生一个仓库我这里采用的是我搭建博客的仓库<u>xxx&#x2F;xxx.github.io</u>。然后我们打开仓库的设置，把discussion打上√</p><p><img src="https://raw.githubusercontent.com/Peter-JiY/pictures/main//image-20240912121253920.png" alt="image-20240912121253920"></p><h3 id="2-着手安装giscus"><a href="#2-着手安装giscus" class="headerlink" title="2.着手安装giscus"></a>2.着手安装giscus</h3><p>点击进入<a href="https://github.com/apps/giscus">这里</a>进入安装界面，这里我我已经install过了所以显示为configure。如果是第一次进入页面应该是绿色的<strong>install</strong>按钮。</p><p><img src="https://raw.githubusercontent.com/Peter-JiY/pictures/main//image-20240912122042556.png" alt="image-20240912122042556"><br>点击<strong>install</strong>后进入新的页面进行设置</p><p><img src="https://raw.githubusercontent.com/Peter-JiY/pictures/main//image-20240912122455370.png" alt="image-20240912122455370"></p><h3 id="3-进入官方获取配置信息"><a href="#3-进入官方获取配置信息" class="headerlink" title="3.进入官方获取配置信息"></a>3.进入官方获取配置信息</h3><p>仓库名填写之前做<strong>discussion</strong>的仓库名。形如  <u>xxx&#x2F;xxx.github.io</u></p><p><img src="https://raw.githubusercontent.com/Peter-JiY/pictures/main//image-20240912123120097.png" alt="image-20240912123120097"></p><p><strong>继续勾选</strong></p><p><img src="https://raw.githubusercontent.com/Peter-JiY/pictures/main//image-20240912123641865.png" alt="image-20240912123641865"></p><p>按照图中勾选</p><p><img src="https://raw.githubusercontent.com/Peter-JiY/pictures/main//image-20240912123745828.png" alt="image-20240912123745828"></p><p>出现形如此类的东西<strong>复制</strong>一份等会需要用到</p><p><img src="https://raw.githubusercontent.com/Peter-JiY/pictures/main//image-20240912123939921.png" alt="image-20240912123939921"></p><p>因为我没填写所以是为空的，你填写就会有东西。</p><h3 id="4-将配置文件写入config"><a href="#4-将配置文件写入config" class="headerlink" title="4.将配置文件写入config"></a>4.将配置文件写入config</h3><p>打开**_config.butterfly.yml<strong>先把</strong>use**这里改了</p><p><img src="https://raw.githubusercontent.com/Peter-JiY/pictures/main//image-20240912124130004.png" alt="image-20240912124130004"></p><p>找到这<strong>giscus</strong>然后对照刚刚复制的script把标红的地方依次填写完整。</p><p><img src="https://raw.githubusercontent.com/Peter-JiY/pictures/main//image-20240912124339222.png" alt="image-20240912124339222"></p><p>然后保存，执行命令。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>稍等片刻查看网站，应该是这样的</p><p><img src="https://raw.githubusercontent.com/Peter-JiY/pictures/main//image-20240912124545071.png" alt="image-20240912124545071"></p><p>快来试试吧。本博客已搭载giscus，欢迎评论。</p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> butterfly </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JDBC连接数据池的相关应用（个人理解学习记录）</title>
      <link href="/post/20240911214241.html"/>
      <url>/post/20240911214241.html</url>
      
        <content type="html"><![CDATA[<p>数据连接池的主要概念就是相当于一的超大的水杯喝水，而每次举起杯子又很麻烦，所以就连上吸管去喝，又不断开，保持一定的连接数。</p><p>我的想法是先写一个通用的连接池连接，然后再根据增删改查的相关，再在小模块里面使用不同的sql语句完成相应的操作，最后返还数据池。</p><p>说的直白点就是登录数据库的操作简化成类模块。</p><p>先写一个通用的模板。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.mchange.v2.c3p0.ComboPooledDataSource;</span><br><span class="line"><span class="keyword">import</span> com.mysql.cj.jdbc.Driver;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">C3P0Utils</span> &#123;</span><br><span class="line">    <span class="comment">// 静态数据源实例</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">ComboPooledDataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ComboPooledDataSource</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 配置C3P0连接池</span></span><br><span class="line">            dataSource.setDriverClass(Driver.class.getName());</span><br><span class="line">            dataSource.setJdbcUrl(<span class="string">&quot;jdbc:mysql://localhost:3306/mydb1&quot;</span>);</span><br><span class="line">            dataSource.setUser(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">            dataSource.setPassword(<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">            dataSource.setInitialPoolSize(<span class="number">10</span>);</span><br><span class="line">            dataSource.setMaxPoolSize(<span class="number">20</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取数据库连接</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title function_">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="keyword">return</span> dataSource.getConnection();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">t1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">preparedStatement</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">resultSet</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 获取连接</span></span><br><span class="line">            conn = C3P0Utils.getConnection();</span><br><span class="line">            <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from user&quot;</span>;</span><br><span class="line">            preparedStatement = conn.prepareStatement(sql);</span><br><span class="line">            resultSet = preparedStatement.executeQuery();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 处理结果集</span></span><br><span class="line">            <span class="keyword">while</span> (resultSet.next()) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;User ID: &quot;</span> + resultSet.getInt(<span class="string">&quot;id&quot;</span>) + <span class="string">&quot;, User Name: &quot;</span> + resultSet.getString(<span class="string">&quot;name&quot;</span>));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 关闭资源</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (resultSet != <span class="literal">null</span>) resultSet.close();</span><br><span class="line">                <span class="keyword">if</span> (preparedStatement != <span class="literal">null</span>) preparedStatement.close();</span><br><span class="line">                <span class="keyword">if</span> (conn != <span class="literal">null</span>) conn.close(); <span class="comment">// 将连接返回给连接池</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后再在自己的需求里面执行不同的增删改查语句即可</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开始</title>
      <link href="/post/20240910210822.html"/>
      <url>/post/20240910210822.html</url>
      
        <content type="html"><![CDATA[<p>你好，欢迎来到我的个人博客。在这里我会分享我的一些项目和心得。<br>早几个月前，我刚刚完成了服务器的搭建，并在其上完成了typecho的搭建，选取的是Joe主题。早就听说了github上的page+hexo的玩法，现在我也尝试成功了。</p>]]></content>
      
      
      <categories>
          
          <category> 心情 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 心情 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
